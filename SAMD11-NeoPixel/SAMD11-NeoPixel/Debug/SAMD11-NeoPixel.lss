
SAMD11-NeoPixel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001f1c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  20000000  00001f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c8  20000074  00001f90  00020074  2**2
                  ALLOC
  3 .stack        00000404  2000013c  00002058  00020074  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
  6 .debug_info   00023a64  00000000  00000000  000200f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003725  00000000  00000000  00043b59  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004c8f  00000000  00000000  0004727e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000004e0  00000000  00000000  0004bf0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000630  00000000  00000000  0004c3ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016d05  00000000  00000000  0004ca1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000aef9  00000000  00000000  00063722  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00077ab5  00000000  00000000  0006e61b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000cf8  00000000  00000000  000e60d0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	40 05 00 20 65 16 00 00 61 16 00 00 61 16 00 00     @.. e...a...a...
	...
      2c:	61 16 00 00 00 00 00 00 00 00 00 00 61 16 00 00     a...........a...
      3c:	01 19 00 00 61 16 00 00 61 16 00 00 61 16 00 00     ....a...a...a...
      4c:	61 16 00 00 61 16 00 00 61 16 00 00 61 16 00 00     a...a...a...a...
      5c:	61 16 00 00 61 16 00 00 99 08 00 00 a9 08 00 00     a...a...........
      6c:	b9 08 00 00 61 16 00 00 1d 0e 00 00 2d 0e 00 00     ....a.......-...
      7c:	61 16 00 00 61 16 00 00 61 16 00 00 61 16 00 00     a...a...a...a...

0000008c <__do_global_dtors_aux>:
      8c:	b510      	push	{r4, lr}
      8e:	4c06      	ldr	r4, [pc, #24]	; (a8 <__do_global_dtors_aux+0x1c>)
      90:	7823      	ldrb	r3, [r4, #0]
      92:	2b00      	cmp	r3, #0
      94:	d107      	bne.n	a6 <__do_global_dtors_aux+0x1a>
      96:	4b05      	ldr	r3, [pc, #20]	; (ac <__do_global_dtors_aux+0x20>)
      98:	2b00      	cmp	r3, #0
      9a:	d002      	beq.n	a2 <__do_global_dtors_aux+0x16>
      9c:	4804      	ldr	r0, [pc, #16]	; (b0 <__do_global_dtors_aux+0x24>)
      9e:	e000      	b.n	a2 <__do_global_dtors_aux+0x16>
      a0:	bf00      	nop
      a2:	2301      	movs	r3, #1
      a4:	7023      	strb	r3, [r4, #0]
      a6:	bd10      	pop	{r4, pc}
      a8:	20000074 	.word	0x20000074
      ac:	00000000 	.word	0x00000000
      b0:	00001f1c 	.word	0x00001f1c

000000b4 <frame_dummy>:
      b4:	4b08      	ldr	r3, [pc, #32]	; (d8 <frame_dummy+0x24>)
      b6:	b510      	push	{r4, lr}
      b8:	2b00      	cmp	r3, #0
      ba:	d003      	beq.n	c4 <frame_dummy+0x10>
      bc:	4907      	ldr	r1, [pc, #28]	; (dc <frame_dummy+0x28>)
      be:	4808      	ldr	r0, [pc, #32]	; (e0 <frame_dummy+0x2c>)
      c0:	e000      	b.n	c4 <frame_dummy+0x10>
      c2:	bf00      	nop
      c4:	4807      	ldr	r0, [pc, #28]	; (e4 <frame_dummy+0x30>)
      c6:	6803      	ldr	r3, [r0, #0]
      c8:	2b00      	cmp	r3, #0
      ca:	d100      	bne.n	ce <frame_dummy+0x1a>
      cc:	bd10      	pop	{r4, pc}
      ce:	4b06      	ldr	r3, [pc, #24]	; (e8 <frame_dummy+0x34>)
      d0:	2b00      	cmp	r3, #0
      d2:	d0fb      	beq.n	cc <frame_dummy+0x18>
      d4:	4798      	blx	r3
      d6:	e7f9      	b.n	cc <frame_dummy+0x18>
      d8:	00000000 	.word	0x00000000
      dc:	20000078 	.word	0x20000078
      e0:	00001f1c 	.word	0x00001f1c
      e4:	00001f1c 	.word	0x00001f1c
      e8:	00000000 	.word	0x00000000

000000ec <pixelsBegin>:
 *  Author: Franco
 */ 

#include <NeoPixels.h>

void pixelsBegin(uint16_t n, uint8_t stripPin, uint8_t t) {
      ec:	b570      	push	{r4, r5, r6, lr}
      ee:	b082      	sub	sp, #8
      f0:	0006      	movs	r6, r0
      f2:	0008      	movs	r0, r1
      f4:	0015      	movs	r5, r2
	pin = stripPin;
      f6:	b24b      	sxtb	r3, r1
      f8:	4a22      	ldr	r2, [pc, #136]	; (184 <pixelsBegin+0x98>)
      fa:	7013      	strb	r3, [r2, #0]

	if(pin >= 0) {
      fc:	2b00      	cmp	r3, #0
      fe:	db17      	blt.n	130 <pixelsBegin+0x44>
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     100:	a901      	add	r1, sp, #4
     102:	2301      	movs	r3, #1
     104:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
     106:	2200      	movs	r2, #0
     108:	708a      	strb	r2, [r1, #2]
		struct port_config pin_conf;
		port_get_config_defaults(&pin_conf);

		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     10a:	700b      	strb	r3, [r1, #0]
		port_pin_set_config(pin, &pin_conf);
     10c:	4b1e      	ldr	r3, [pc, #120]	; (188 <pixelsBegin+0x9c>)
     10e:	4798      	blx	r3
		port_pin_set_output_level(pin, false);
     110:	4b1c      	ldr	r3, [pc, #112]	; (184 <pixelsBegin+0x98>)
     112:	781a      	ldrb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
     114:	09d1      	lsrs	r1, r2, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
     116:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     118:	2900      	cmp	r1, #0
     11a:	d104      	bne.n	126 <pixelsBegin+0x3a>
		return &(ports[port_index]->Group[group_index]);
     11c:	0953      	lsrs	r3, r2, #5
     11e:	01db      	lsls	r3, r3, #7
     120:	491a      	ldr	r1, [pc, #104]	; (18c <pixelsBegin+0xa0>)
     122:	468c      	mov	ip, r1
     124:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     126:	211f      	movs	r1, #31
     128:	4011      	ands	r1, r2
     12a:	2201      	movs	r2, #1
     12c:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
     12e:	615a      	str	r2, [r3, #20]
	}

	// Allocate new data -- note: ALL PIXELS ARE CLEARED
	numBytes = n * 3;
     130:	0074      	lsls	r4, r6, #1
     132:	1934      	adds	r4, r6, r4
     134:	b2a4      	uxth	r4, r4
     136:	4b16      	ldr	r3, [pc, #88]	; (190 <pixelsBegin+0xa4>)
     138:	801c      	strh	r4, [r3, #0]
	if((pixels = (uint8_t *)malloc(numBytes))) {
     13a:	0020      	movs	r0, r4
     13c:	4b15      	ldr	r3, [pc, #84]	; (194 <pixelsBegin+0xa8>)
     13e:	4798      	blx	r3
     140:	4b15      	ldr	r3, [pc, #84]	; (198 <pixelsBegin+0xac>)
     142:	6018      	str	r0, [r3, #0]
     144:	2800      	cmp	r0, #0
     146:	d016      	beq.n	176 <pixelsBegin+0x8a>
		memset(pixels, 0, numBytes);
     148:	0022      	movs	r2, r4
     14a:	2100      	movs	r1, #0
     14c:	4b13      	ldr	r3, [pc, #76]	; (19c <pixelsBegin+0xb0>)
     14e:	4798      	blx	r3
		numLEDs = n;
     150:	4b13      	ldr	r3, [pc, #76]	; (1a0 <pixelsBegin+0xb4>)
     152:	801e      	strh	r6, [r3, #0]
		} else {
		numLEDs = numBytes = 0;
	}

	rOffset = (t >> 4) & 0b11; // regarding R/G/B/W offsets
     154:	092b      	lsrs	r3, r5, #4
     156:	2203      	movs	r2, #3
     158:	4013      	ands	r3, r2
     15a:	4912      	ldr	r1, [pc, #72]	; (1a4 <pixelsBegin+0xb8>)
     15c:	700b      	strb	r3, [r1, #0]
	gOffset = (t >> 2) & 0b11;
     15e:	08ab      	lsrs	r3, r5, #2
     160:	4013      	ands	r3, r2
     162:	4911      	ldr	r1, [pc, #68]	; (1a8 <pixelsBegin+0xbc>)
     164:	700b      	strb	r3, [r1, #0]
	bOffset =  t       & 0b11;
     166:	402a      	ands	r2, r5
     168:	4b10      	ldr	r3, [pc, #64]	; (1ac <pixelsBegin+0xc0>)
     16a:	701a      	strb	r2, [r3, #0]

	begun = true;
     16c:	2201      	movs	r2, #1
     16e:	4b10      	ldr	r3, [pc, #64]	; (1b0 <pixelsBegin+0xc4>)
     170:	701a      	strb	r2, [r3, #0]
}
     172:	b002      	add	sp, #8
     174:	bd70      	pop	{r4, r5, r6, pc}
		numLEDs = numBytes = 0;
     176:	2300      	movs	r3, #0
     178:	4a05      	ldr	r2, [pc, #20]	; (190 <pixelsBegin+0xa4>)
     17a:	8013      	strh	r3, [r2, #0]
     17c:	4a08      	ldr	r2, [pc, #32]	; (1a0 <pixelsBegin+0xb4>)
     17e:	8013      	strh	r3, [r2, #0]
     180:	e7e8      	b.n	154 <pixelsBegin+0x68>
     182:	46c0      	nop			; (mov r8, r8)
     184:	200000de 	.word	0x200000de
     188:	00000ee5 	.word	0x00000ee5
     18c:	41004400 	.word	0x41004400
     190:	200000d8 	.word	0x200000d8
     194:	00001da1 	.word	0x00001da1
     198:	200000d0 	.word	0x200000d0
     19c:	00001db5 	.word	0x00001db5
     1a0:	200000e0 	.word	0x200000e0
     1a4:	200000df 	.word	0x200000df
     1a8:	200000da 	.word	0x200000da
     1ac:	200000dd 	.word	0x200000dd
     1b0:	200000db 	.word	0x200000db

000001b4 <pixelsShow>:

void pixelsShow(){
     1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(!pixels) return;
     1b6:	4b30      	ldr	r3, [pc, #192]	; (278 <pixelsShow+0xc4>)
     1b8:	681b      	ldr	r3, [r3, #0]
     1ba:	2b00      	cmp	r3, #0
     1bc:	d100      	bne.n	1c0 <pixelsShow+0xc>
     1be:	e059      	b.n	274 <pixelsShow+0xc0>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     1c0:	b672      	cpsid	i
	// to the PORT register as needed.
	uint8_t  *ptr, *end, p, bitMask, portNum;
	uint32_t  pinMask;

	portNum =  0;
	pinMask =  (1ul <<  pin);
     1c2:	4b2e      	ldr	r3, [pc, #184]	; (27c <pixelsShow+0xc8>)
     1c4:	781b      	ldrb	r3, [r3, #0]
     1c6:	b25b      	sxtb	r3, r3
     1c8:	2201      	movs	r2, #1
     1ca:	409a      	lsls	r2, r3
	ptr     =  pixels;
     1cc:	4b2a      	ldr	r3, [pc, #168]	; (278 <pixelsShow+0xc4>)
     1ce:	681b      	ldr	r3, [r3, #0]
	end     =  ptr + numBytes;
     1d0:	492b      	ldr	r1, [pc, #172]	; (280 <pixelsShow+0xcc>)
     1d2:	880e      	ldrh	r6, [r1, #0]
     1d4:	199e      	adds	r6, r3, r6
	p       = *ptr++;
     1d6:	1c59      	adds	r1, r3, #1
     1d8:	7818      	ldrb	r0, [r3, #0]
	bitMask =  0x80;
     1da:	2380      	movs	r3, #128	; 0x80

	volatile uint32_t *set = &(PORT->Group[portNum].OUTSET.reg), 
		*clr = &(PORT->Group[portNum].OUTCLR.reg);

	for(;;) {
		*set = pinMask;
     1dc:	4d29      	ldr	r5, [pc, #164]	; (284 <pixelsShow+0xd0>)
			asm("nop; nop; nop; nop; nop; nop; nop; nop;"
			"nop; nop; nop; nop; nop; nop; nop; nop;"
			"nop; nop; nop; nop;");
			*clr = pinMask;
			} else {
			*clr = pinMask;
     1de:	4c2a      	ldr	r4, [pc, #168]	; (288 <pixelsShow+0xd4>)
		if(bitMask >>= 1) {
			asm("nop; nop; nop; nop; nop; nop; nop; nop; nop;");
			} else {
			if(ptr >= end) break;
			p       = *ptr++;
			bitMask = 0x80;
     1e0:	2780      	movs	r7, #128	; 0x80
     1e2:	e01a      	b.n	21a <pixelsShow+0x66>
			*clr = pinMask;
     1e4:	6022      	str	r2, [r4, #0]
			asm("nop; nop; nop; nop; nop; nop; nop; nop;"
     1e6:	46c0      	nop			; (mov r8, r8)
     1e8:	46c0      	nop			; (mov r8, r8)
     1ea:	46c0      	nop			; (mov r8, r8)
     1ec:	46c0      	nop			; (mov r8, r8)
     1ee:	46c0      	nop			; (mov r8, r8)
     1f0:	46c0      	nop			; (mov r8, r8)
     1f2:	46c0      	nop			; (mov r8, r8)
     1f4:	46c0      	nop			; (mov r8, r8)
     1f6:	46c0      	nop			; (mov r8, r8)
     1f8:	46c0      	nop			; (mov r8, r8)
     1fa:	46c0      	nop			; (mov r8, r8)
     1fc:	46c0      	nop			; (mov r8, r8)
     1fe:	46c0      	nop			; (mov r8, r8)
     200:	46c0      	nop			; (mov r8, r8)
     202:	46c0      	nop			; (mov r8, r8)
     204:	46c0      	nop			; (mov r8, r8)
     206:	46c0      	nop			; (mov r8, r8)
     208:	46c0      	nop			; (mov r8, r8)
     20a:	46c0      	nop			; (mov r8, r8)
     20c:	46c0      	nop			; (mov r8, r8)
     20e:	e024      	b.n	25a <pixelsShow+0xa6>
			if(ptr >= end) break;
     210:	42b1      	cmp	r1, r6
     212:	d22e      	bcs.n	272 <pixelsShow+0xbe>
			p       = *ptr++;
     214:	7808      	ldrb	r0, [r1, #0]
     216:	3101      	adds	r1, #1
			bitMask = 0x80;
     218:	003b      	movs	r3, r7
		*set = pinMask;
     21a:	602a      	str	r2, [r5, #0]
		asm("nop; nop; nop; nop; nop; nop; nop; nop;");
     21c:	46c0      	nop			; (mov r8, r8)
     21e:	46c0      	nop			; (mov r8, r8)
     220:	46c0      	nop			; (mov r8, r8)
     222:	46c0      	nop			; (mov r8, r8)
     224:	46c0      	nop			; (mov r8, r8)
     226:	46c0      	nop			; (mov r8, r8)
     228:	46c0      	nop			; (mov r8, r8)
     22a:	46c0      	nop			; (mov r8, r8)
		if(p & bitMask) {
     22c:	4203      	tst	r3, r0
     22e:	d0d9      	beq.n	1e4 <pixelsShow+0x30>
			asm("nop; nop; nop; nop; nop; nop; nop; nop;"
     230:	46c0      	nop			; (mov r8, r8)
     232:	46c0      	nop			; (mov r8, r8)
     234:	46c0      	nop			; (mov r8, r8)
     236:	46c0      	nop			; (mov r8, r8)
     238:	46c0      	nop			; (mov r8, r8)
     23a:	46c0      	nop			; (mov r8, r8)
     23c:	46c0      	nop			; (mov r8, r8)
     23e:	46c0      	nop			; (mov r8, r8)
     240:	46c0      	nop			; (mov r8, r8)
     242:	46c0      	nop			; (mov r8, r8)
     244:	46c0      	nop			; (mov r8, r8)
     246:	46c0      	nop			; (mov r8, r8)
     248:	46c0      	nop			; (mov r8, r8)
     24a:	46c0      	nop			; (mov r8, r8)
     24c:	46c0      	nop			; (mov r8, r8)
     24e:	46c0      	nop			; (mov r8, r8)
     250:	46c0      	nop			; (mov r8, r8)
     252:	46c0      	nop			; (mov r8, r8)
     254:	46c0      	nop			; (mov r8, r8)
     256:	46c0      	nop			; (mov r8, r8)
			*clr = pinMask;
     258:	6022      	str	r2, [r4, #0]
		if(bitMask >>= 1) {
     25a:	085b      	lsrs	r3, r3, #1
     25c:	d0d8      	beq.n	210 <pixelsShow+0x5c>
			asm("nop; nop; nop; nop; nop; nop; nop; nop; nop;");
     25e:	46c0      	nop			; (mov r8, r8)
     260:	46c0      	nop			; (mov r8, r8)
     262:	46c0      	nop			; (mov r8, r8)
     264:	46c0      	nop			; (mov r8, r8)
     266:	46c0      	nop			; (mov r8, r8)
     268:	46c0      	nop			; (mov r8, r8)
     26a:	46c0      	nop			; (mov r8, r8)
     26c:	46c0      	nop			; (mov r8, r8)
     26e:	46c0      	nop			; (mov r8, r8)
     270:	e7d3      	b.n	21a <pixelsShow+0x66>
  __ASM volatile ("cpsie i" : : : "memory");
     272:	b662      	cpsie	i
		}
	}
	__enable_irq();
	//endTime = micros(); // Save EOD time for latch on next call
}
     274:	bdf0      	pop	{r4, r5, r6, r7, pc}
     276:	46c0      	nop			; (mov r8, r8)
     278:	200000d0 	.word	0x200000d0
     27c:	200000de 	.word	0x200000de
     280:	200000d8 	.word	0x200000d8
     284:	41004418 	.word	0x41004418
     288:	41004414 	.word	0x41004414

0000028c <setPixelColor>:

// Set pixel color from separate R,G,B components:
void setPixelColor(
	uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
     28c:	b530      	push	{r4, r5, lr}

	if(n < numLEDs) {
     28e:	4c0e      	ldr	r4, [pc, #56]	; (2c8 <setPixelColor+0x3c>)
     290:	8824      	ldrh	r4, [r4, #0]
     292:	4284      	cmp	r4, r0
     294:	d917      	bls.n	2c6 <setPixelColor+0x3a>
		if(brightness) { // See notes in setBrightness()
     296:	4c0d      	ldr	r4, [pc, #52]	; (2cc <setPixelColor+0x40>)
     298:	7824      	ldrb	r4, [r4, #0]
     29a:	2c00      	cmp	r4, #0
     29c:	d005      	beq.n	2aa <setPixelColor+0x1e>
			r = (r * brightness) >> 8;
     29e:	4361      	muls	r1, r4
     2a0:	0a09      	lsrs	r1, r1, #8
			g = (g * brightness) >> 8;
     2a2:	4362      	muls	r2, r4
     2a4:	0a12      	lsrs	r2, r2, #8
			b = (b * brightness) >> 8;
     2a6:	4363      	muls	r3, r4
     2a8:	0a1b      	lsrs	r3, r3, #8
		}
		uint8_t *p;
		p = &pixels[n * 3];    // 3 bytes per pixel
     2aa:	0045      	lsls	r5, r0, #1
     2ac:	182d      	adds	r5, r5, r0
     2ae:	4808      	ldr	r0, [pc, #32]	; (2d0 <setPixelColor+0x44>)
     2b0:	6800      	ldr	r0, [r0, #0]
     2b2:	1940      	adds	r0, r0, r5
		
		p[rOffset] = r;          // R,G,B always stored
     2b4:	4c07      	ldr	r4, [pc, #28]	; (2d4 <setPixelColor+0x48>)
     2b6:	7824      	ldrb	r4, [r4, #0]
     2b8:	5501      	strb	r1, [r0, r4]
		p[gOffset] = g;
     2ba:	4907      	ldr	r1, [pc, #28]	; (2d8 <setPixelColor+0x4c>)
     2bc:	7809      	ldrb	r1, [r1, #0]
     2be:	5442      	strb	r2, [r0, r1]
		p[bOffset] = b;
     2c0:	4a06      	ldr	r2, [pc, #24]	; (2dc <setPixelColor+0x50>)
     2c2:	7812      	ldrb	r2, [r2, #0]
     2c4:	5483      	strb	r3, [r0, r2]
	}
}
     2c6:	bd30      	pop	{r4, r5, pc}
     2c8:	200000e0 	.word	0x200000e0
     2cc:	200000dc 	.word	0x200000dc
     2d0:	200000d0 	.word	0x200000d0
     2d4:	200000df 	.word	0x200000df
     2d8:	200000da 	.word	0x200000da
     2dc:	200000dd 	.word	0x200000dd

000002e0 <setPixelColorC>:

// Set pixel color from 'packed' 32-bit RGB color:
void setPixelColorC(uint16_t n, uint32_t c) {
     2e0:	b530      	push	{r4, r5, lr}
	if(n < numLEDs) {
     2e2:	4b13      	ldr	r3, [pc, #76]	; (330 <setPixelColorC+0x50>)
     2e4:	881b      	ldrh	r3, [r3, #0]
     2e6:	4283      	cmp	r3, r0
     2e8:	d916      	bls.n	318 <setPixelColorC+0x38>
		uint8_t *p,
		r = (uint8_t)(c >> 16),
     2ea:	0c0c      	lsrs	r4, r1, #16
		g = (uint8_t)(c >>  8),
     2ec:	0a0a      	lsrs	r2, r1, #8
		b = (uint8_t)c;
		if(brightness) { // See notes in setBrightness()
     2ee:	4b11      	ldr	r3, [pc, #68]	; (334 <setPixelColorC+0x54>)
     2f0:	781b      	ldrb	r3, [r3, #0]
     2f2:	2b00      	cmp	r3, #0
     2f4:	d111      	bne.n	31a <setPixelColorC+0x3a>
		r = (uint8_t)(c >> 16),
     2f6:	b2e4      	uxtb	r4, r4
		g = (uint8_t)(c >>  8),
     2f8:	b2d2      	uxtb	r2, r2
		b = (uint8_t)c;
     2fa:	b2cb      	uxtb	r3, r1
			r = (r * brightness) >> 8;
			g = (g * brightness) >> 8;
			b = (b * brightness) >> 8;
		}
		
		p = &pixels[n * 3];
     2fc:	0041      	lsls	r1, r0, #1
     2fe:	1809      	adds	r1, r1, r0
     300:	480d      	ldr	r0, [pc, #52]	; (338 <setPixelColorC+0x58>)
     302:	6800      	ldr	r0, [r0, #0]
     304:	1840      	adds	r0, r0, r1
		
		p[rOffset] = r;
     306:	490d      	ldr	r1, [pc, #52]	; (33c <setPixelColorC+0x5c>)
     308:	7809      	ldrb	r1, [r1, #0]
     30a:	5444      	strb	r4, [r0, r1]
		p[gOffset] = g;
     30c:	490c      	ldr	r1, [pc, #48]	; (340 <setPixelColorC+0x60>)
     30e:	7809      	ldrb	r1, [r1, #0]
     310:	5442      	strb	r2, [r0, r1]
		p[bOffset] = b;
     312:	4a0c      	ldr	r2, [pc, #48]	; (344 <setPixelColorC+0x64>)
     314:	7812      	ldrb	r2, [r2, #0]
     316:	5483      	strb	r3, [r0, r2]
	}
}
     318:	bd30      	pop	{r4, r5, pc}
			r = (r * brightness) >> 8;
     31a:	25ff      	movs	r5, #255	; 0xff
     31c:	402c      	ands	r4, r5
     31e:	435c      	muls	r4, r3
     320:	0a24      	lsrs	r4, r4, #8
			g = (g * brightness) >> 8;
     322:	402a      	ands	r2, r5
     324:	435a      	muls	r2, r3
     326:	0a12      	lsrs	r2, r2, #8
			b = (b * brightness) >> 8;
     328:	4029      	ands	r1, r5
     32a:	434b      	muls	r3, r1
     32c:	0a1b      	lsrs	r3, r3, #8
     32e:	e7e5      	b.n	2fc <setPixelColorC+0x1c>
     330:	200000e0 	.word	0x200000e0
     334:	200000dc 	.word	0x200000dc
     338:	200000d0 	.word	0x200000d0
     33c:	200000df 	.word	0x200000df
     340:	200000da 	.word	0x200000da
     344:	200000dd 	.word	0x200000dd

00000348 <setBrightness>:
// and scale it (subsequent graphics commands also work at this
// brightness level).  If there's a significant step up in brightness,
// the limited number of steps (quantization) in the old data will be
// quite visible in the re-scaled version.  For a non-destructive
// change, you'll need to re-render the full strip data.  C'est la vie.
void setBrightness(uint8_t b) {
     348:	b570      	push	{r4, r5, r6, lr}
	// This simplifies the actual scaling math later, allowing a fast
	// 8x8-bit multiply and taking the MSB.  'brightness' is a uint8_t,
	// adding 1 here may (intentionally) roll over...so 0 = max brightness
	// (color values are interpreted literally; no scaling), 1 = min
	// brightness (off), 255 = just below max brightness.
	uint8_t newBrightness = b + 1;
     34a:	1c45      	adds	r5, r0, #1
     34c:	b2ed      	uxtb	r5, r5
	if(newBrightness != brightness) { // Compare against prior value
     34e:	4b15      	ldr	r3, [pc, #84]	; (3a4 <setBrightness+0x5c>)
     350:	7819      	ldrb	r1, [r3, #0]
     352:	428d      	cmp	r5, r1
     354:	d01f      	beq.n	396 <setBrightness+0x4e>
		// Brightness has changed -- re-scale existing data in RAM
		uint8_t  c,
		*ptr           = pixels,
     356:	4b14      	ldr	r3, [pc, #80]	; (3a8 <setBrightness+0x60>)
     358:	681c      	ldr	r4, [r3, #0]
		oldBrightness = brightness - 1; // De-wrap old brightness value
     35a:	3901      	subs	r1, #1
     35c:	b2c9      	uxtb	r1, r1
		uint16_t scale;
		if(oldBrightness == 0) scale = 0; // Avoid /0
     35e:	2600      	movs	r6, #0
     360:	2900      	cmp	r1, #0
     362:	d006      	beq.n	372 <setBrightness+0x2a>
		else if(b == 255) scale = 65535 / oldBrightness;
     364:	28ff      	cmp	r0, #255	; 0xff
     366:	d017      	beq.n	398 <setBrightness+0x50>
		else scale = (((uint16_t)newBrightness << 8) - 1) / oldBrightness;
     368:	0228      	lsls	r0, r5, #8
     36a:	3801      	subs	r0, #1
     36c:	4b0f      	ldr	r3, [pc, #60]	; (3ac <setBrightness+0x64>)
     36e:	4798      	blx	r3
     370:	b286      	uxth	r6, r0
		for(uint16_t i=0; i<numBytes; i++) {
     372:	4b0f      	ldr	r3, [pc, #60]	; (3b0 <setBrightness+0x68>)
     374:	881b      	ldrh	r3, [r3, #0]
     376:	2b00      	cmp	r3, #0
     378:	d00b      	beq.n	392 <setBrightness+0x4a>
     37a:	2200      	movs	r2, #0
     37c:	480c      	ldr	r0, [pc, #48]	; (3b0 <setBrightness+0x68>)
			c      = *ptr;
			*ptr++ = (c * scale) >> 8;
     37e:	7823      	ldrb	r3, [r4, #0]
     380:	4373      	muls	r3, r6
     382:	121b      	asrs	r3, r3, #8
     384:	7023      	strb	r3, [r4, #0]
		for(uint16_t i=0; i<numBytes; i++) {
     386:	3201      	adds	r2, #1
     388:	b292      	uxth	r2, r2
     38a:	3401      	adds	r4, #1
     38c:	8803      	ldrh	r3, [r0, #0]
     38e:	4293      	cmp	r3, r2
     390:	d8f5      	bhi.n	37e <setBrightness+0x36>
		}
		brightness = newBrightness;
     392:	4b04      	ldr	r3, [pc, #16]	; (3a4 <setBrightness+0x5c>)
     394:	701d      	strb	r5, [r3, #0]
	}
}
     396:	bd70      	pop	{r4, r5, r6, pc}
		else if(b == 255) scale = 65535 / oldBrightness;
     398:	4806      	ldr	r0, [pc, #24]	; (3b4 <setBrightness+0x6c>)
     39a:	4b04      	ldr	r3, [pc, #16]	; (3ac <setBrightness+0x64>)
     39c:	4798      	blx	r3
     39e:	b286      	uxth	r6, r0
     3a0:	e7e7      	b.n	372 <setBrightness+0x2a>
     3a2:	46c0      	nop			; (mov r8, r8)
     3a4:	200000dc 	.word	0x200000dc
     3a8:	200000d0 	.word	0x200000d0
     3ac:	00001b2d 	.word	0x00001b2d
     3b0:	200000d8 	.word	0x200000d8
     3b4:	0000ffff 	.word	0x0000ffff

000003b8 <setAll>:
// Packed format is always RGB, regardless of LED strand color order.
uint32_t getColor32(uint8_t r, uint8_t g, uint8_t b) {
	return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
}

void setAll(int r, int g, int b){
     3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
     3ba:	b083      	sub	sp, #12
     3bc:	9000      	str	r0, [sp, #0]
     3be:	9101      	str	r1, [sp, #4]
	for (int i = 0;i<numLEDs;i++){
     3c0:	4b09      	ldr	r3, [pc, #36]	; (3e8 <setAll+0x30>)
     3c2:	881b      	ldrh	r3, [r3, #0]
     3c4:	2b00      	cmp	r3, #0
     3c6:	dd0d      	ble.n	3e4 <setAll+0x2c>
     3c8:	2400      	movs	r4, #0
		setPixelColor(i,r,g,b);
     3ca:	b2d5      	uxtb	r5, r2
     3cc:	4f07      	ldr	r7, [pc, #28]	; (3ec <setAll+0x34>)
	for (int i = 0;i<numLEDs;i++){
     3ce:	4e06      	ldr	r6, [pc, #24]	; (3e8 <setAll+0x30>)
		setPixelColor(i,r,g,b);
     3d0:	466b      	mov	r3, sp
     3d2:	791a      	ldrb	r2, [r3, #4]
     3d4:	7819      	ldrb	r1, [r3, #0]
     3d6:	b2a0      	uxth	r0, r4
     3d8:	002b      	movs	r3, r5
     3da:	47b8      	blx	r7
	for (int i = 0;i<numLEDs;i++){
     3dc:	3401      	adds	r4, #1
     3de:	8833      	ldrh	r3, [r6, #0]
     3e0:	42a3      	cmp	r3, r4
     3e2:	dcf5      	bgt.n	3d0 <setAll+0x18>
	}
}
     3e4:	b003      	add	sp, #12
     3e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     3e8:	200000e0 	.word	0x200000e0
     3ec:	0000028d 	.word	0x0000028d

000003f0 <Wheel>:
}

// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(uint8_t WheelPos) {
	if(WheelPos < 85) {
     3f0:	2854      	cmp	r0, #84	; 0x54
     3f2:	d90d      	bls.n	410 <STACK_SIZE+0x10>
		return getColor32(WheelPos * 3, 255 - WheelPos * 3, 0);
	}
	else if(WheelPos < 170) {
     3f4:	28a9      	cmp	r0, #169	; 0xa9
     3f6:	d916      	bls.n	426 <STACK_SIZE+0x26>
		WheelPos -= 85;
		return getColor32(255 - WheelPos * 3, 0, WheelPos * 3);
	}
	else {
		WheelPos -= 170;
     3f8:	3056      	adds	r0, #86	; 0x56
     3fa:	b2c3      	uxtb	r3, r0
		return getColor32(0, WheelPos * 3, 255 - WheelPos * 3);
     3fc:	0058      	lsls	r0, r3, #1
     3fe:	1818      	adds	r0, r3, r0
	return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
     400:	b2c2      	uxtb	r2, r0
     402:	0212      	lsls	r2, r2, #8
		return getColor32(0, WheelPos * 3, 255 - WheelPos * 3);
     404:	0098      	lsls	r0, r3, #2
     406:	1a1b      	subs	r3, r3, r0
     408:	3b01      	subs	r3, #1
	return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
     40a:	b2d8      	uxtb	r0, r3
     40c:	4310      	orrs	r0, r2
		return getColor32(0, WheelPos * 3, 255 - WheelPos * 3);
     40e:	e009      	b.n	424 <STACK_SIZE+0x24>
		return getColor32(WheelPos * 3, 255 - WheelPos * 3, 0);
     410:	0082      	lsls	r2, r0, #2
     412:	1a82      	subs	r2, r0, r2
     414:	3a01      	subs	r2, #1
	return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
     416:	b2d2      	uxtb	r2, r2
     418:	0212      	lsls	r2, r2, #8
		return getColor32(WheelPos * 3, 255 - WheelPos * 3, 0);
     41a:	0043      	lsls	r3, r0, #1
     41c:	18c0      	adds	r0, r0, r3
	return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
     41e:	b2c0      	uxtb	r0, r0
     420:	0400      	lsls	r0, r0, #16
     422:	4310      	orrs	r0, r2
	}
}
     424:	4770      	bx	lr
		WheelPos -= 85;
     426:	3855      	subs	r0, #85	; 0x55
     428:	b2c2      	uxtb	r2, r0
		return getColor32(255 - WheelPos * 3, 0, WheelPos * 3);
     42a:	0090      	lsls	r0, r2, #2
     42c:	1a10      	subs	r0, r2, r0
     42e:	3801      	subs	r0, #1
	return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
     430:	b2c3      	uxtb	r3, r0
     432:	041b      	lsls	r3, r3, #16
		return getColor32(255 - WheelPos * 3, 0, WheelPos * 3);
     434:	0050      	lsls	r0, r2, #1
     436:	1810      	adds	r0, r2, r0
	return ((uint32_t)r << 16) | ((uint32_t)g <<  8) | b;
     438:	b2c0      	uxtb	r0, r0
     43a:	4318      	orrs	r0, r3
		return getColor32(255 - WheelPos * 3, 0, WheelPos * 3);
     43c:	e7f2      	b.n	424 <STACK_SIZE+0x24>
	...

00000440 <delay>:
		pixelsShow();
		delay(wait);
	}
}

void delay(int delay_time){
     440:	b510      	push	{r4, lr}
	delay_ms(delay_time);
     442:	2800      	cmp	r0, #0
     444:	d103      	bne.n	44e <delay+0xe>
     446:	2001      	movs	r0, #1
     448:	4b02      	ldr	r3, [pc, #8]	; (454 <delay+0x14>)
     44a:	4798      	blx	r3
     44c:	bd10      	pop	{r4, pc}
	delay_ms(delay_time);
     44e:	4b02      	ldr	r3, [pc, #8]	; (458 <delay+0x18>)
     450:	4798      	blx	r3
     452:	e7fb      	b.n	44c <delay+0xc>
     454:	00000525 	.word	0x00000525
     458:	00000551 	.word	0x00000551

0000045c <rainbow>:
void rainbow(uint8_t wait) {
     45c:	b5f0      	push	{r4, r5, r6, r7, lr}
     45e:	46de      	mov	lr, fp
     460:	4657      	mov	r7, sl
     462:	464e      	mov	r6, r9
     464:	b5c0      	push	{r6, r7, lr}
     466:	b082      	sub	sp, #8
     468:	9001      	str	r0, [sp, #4]
	for(j=0; j<256; j++) {
     46a:	2300      	movs	r3, #0
     46c:	469a      	mov	sl, r3
	return numLEDs;
     46e:	4b18      	ldr	r3, [pc, #96]	; (4d0 <rainbow+0x74>)
     470:	469b      	mov	fp, r3
			uint32_t color32 = Wheel((i*1+j) & 255);
     472:	4b18      	ldr	r3, [pc, #96]	; (4d4 <rainbow+0x78>)
     474:	4699      	mov	r9, r3
			setPixelColorC(i, color32);
     476:	4f18      	ldr	r7, [pc, #96]	; (4d8 <rainbow+0x7c>)
     478:	e018      	b.n	4ac <rainbow+0x50>
			uint32_t color32 = Wheel((i*1+j) & 255);
     47a:	0028      	movs	r0, r5
     47c:	47c8      	blx	r9
     47e:	0001      	movs	r1, r0
			setPixelColorC(i, color32);
     480:	0020      	movs	r0, r4
     482:	47b8      	blx	r7
		for(i=0; i<numPixels(); i++) {
     484:	3401      	adds	r4, #1
     486:	b2a4      	uxth	r4, r4
     488:	3501      	adds	r5, #1
     48a:	b2ed      	uxtb	r5, r5
     48c:	8833      	ldrh	r3, [r6, #0]
     48e:	42a3      	cmp	r3, r4
     490:	d8f3      	bhi.n	47a <rainbow+0x1e>
		pixelsShow();
     492:	4b12      	ldr	r3, [pc, #72]	; (4dc <rainbow+0x80>)
     494:	4798      	blx	r3
		delay(wait);
     496:	9801      	ldr	r0, [sp, #4]
     498:	4b11      	ldr	r3, [pc, #68]	; (4e0 <rainbow+0x84>)
     49a:	4798      	blx	r3
	for(j=0; j<256; j++) {
     49c:	4653      	mov	r3, sl
     49e:	3301      	adds	r3, #1
     4a0:	b29b      	uxth	r3, r3
     4a2:	469a      	mov	sl, r3
     4a4:	2380      	movs	r3, #128	; 0x80
     4a6:	005b      	lsls	r3, r3, #1
     4a8:	459a      	cmp	sl, r3
     4aa:	d00a      	beq.n	4c2 <rainbow+0x66>
		for(i=0; i<numPixels(); i++) {
     4ac:	465b      	mov	r3, fp
     4ae:	881b      	ldrh	r3, [r3, #0]
     4b0:	2b00      	cmp	r3, #0
     4b2:	d0ee      	beq.n	492 <rainbow+0x36>
     4b4:	4653      	mov	r3, sl
     4b6:	466a      	mov	r2, sp
     4b8:	70d3      	strb	r3, [r2, #3]
     4ba:	78d5      	ldrb	r5, [r2, #3]
     4bc:	2400      	movs	r4, #0
	return numLEDs;
     4be:	4e04      	ldr	r6, [pc, #16]	; (4d0 <rainbow+0x74>)
     4c0:	e7db      	b.n	47a <rainbow+0x1e>
}
     4c2:	b002      	add	sp, #8
     4c4:	bc1c      	pop	{r2, r3, r4}
     4c6:	4691      	mov	r9, r2
     4c8:	469a      	mov	sl, r3
     4ca:	46a3      	mov	fp, r4
     4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     4ce:	46c0      	nop			; (mov r8, r8)
     4d0:	200000e0 	.word	0x200000e0
     4d4:	000003f1 	.word	0x000003f1
     4d8:	000002e1 	.word	0x000002e1
     4dc:	000001b5 	.word	0x000001b5
     4e0:	00000441 	.word	0x00000441

000004e4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     4e4:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     4e6:	2000      	movs	r0, #0
     4e8:	4b08      	ldr	r3, [pc, #32]	; (50c <delay_init+0x28>)
     4ea:	4798      	blx	r3
     4ec:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     4ee:	4c08      	ldr	r4, [pc, #32]	; (510 <delay_init+0x2c>)
     4f0:	21fa      	movs	r1, #250	; 0xfa
     4f2:	0089      	lsls	r1, r1, #2
     4f4:	47a0      	blx	r4
     4f6:	4b07      	ldr	r3, [pc, #28]	; (514 <delay_init+0x30>)
     4f8:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     4fa:	4907      	ldr	r1, [pc, #28]	; (518 <delay_init+0x34>)
     4fc:	0028      	movs	r0, r5
     4fe:	47a0      	blx	r4
     500:	4b06      	ldr	r3, [pc, #24]	; (51c <delay_init+0x38>)
     502:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     504:	2205      	movs	r2, #5
     506:	4b06      	ldr	r3, [pc, #24]	; (520 <delay_init+0x3c>)
     508:	601a      	str	r2, [r3, #0]
}
     50a:	bd70      	pop	{r4, r5, r6, pc}
     50c:	000013f1 	.word	0x000013f1
     510:	00001a19 	.word	0x00001a19
     514:	20000000 	.word	0x20000000
     518:	000f4240 	.word	0x000f4240
     51c:	20000004 	.word	0x20000004
     520:	e000e010 	.word	0xe000e010

00000524 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     524:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     526:	4b08      	ldr	r3, [pc, #32]	; (548 <delay_cycles_us+0x24>)
     528:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     52a:	4a08      	ldr	r2, [pc, #32]	; (54c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     52c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     52e:	2180      	movs	r1, #128	; 0x80
     530:	0249      	lsls	r1, r1, #9
	while (n--) {
     532:	3801      	subs	r0, #1
     534:	d307      	bcc.n	546 <delay_cycles_us+0x22>
	if (n > 0) {
     536:	2c00      	cmp	r4, #0
     538:	d0fb      	beq.n	532 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     53a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     53c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     53e:	6813      	ldr	r3, [r2, #0]
     540:	420b      	tst	r3, r1
     542:	d0fc      	beq.n	53e <delay_cycles_us+0x1a>
     544:	e7f5      	b.n	532 <delay_cycles_us+0xe>
	}
}
     546:	bd30      	pop	{r4, r5, pc}
     548:	20000004 	.word	0x20000004
     54c:	e000e010 	.word	0xe000e010

00000550 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     550:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     552:	4b08      	ldr	r3, [pc, #32]	; (574 <delay_cycles_ms+0x24>)
     554:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     556:	4a08      	ldr	r2, [pc, #32]	; (578 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     558:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     55a:	2180      	movs	r1, #128	; 0x80
     55c:	0249      	lsls	r1, r1, #9
	while (n--) {
     55e:	3801      	subs	r0, #1
     560:	d307      	bcc.n	572 <delay_cycles_ms+0x22>
	if (n > 0) {
     562:	2c00      	cmp	r4, #0
     564:	d0fb      	beq.n	55e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     566:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     568:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     56a:	6813      	ldr	r3, [r2, #0]
     56c:	420b      	tst	r3, r1
     56e:	d0fc      	beq.n	56a <delay_cycles_ms+0x1a>
     570:	e7f5      	b.n	55e <delay_cycles_ms+0xe>
	}
}
     572:	bd30      	pop	{r4, r5, pc}
     574:	20000000 	.word	0x20000000
     578:	e000e010 	.word	0xe000e010

0000057c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     57c:	b5f0      	push	{r4, r5, r6, r7, lr}
     57e:	46de      	mov	lr, fp
     580:	4657      	mov	r7, sl
     582:	464e      	mov	r6, r9
     584:	4645      	mov	r5, r8
     586:	b5e0      	push	{r5, r6, r7, lr}
     588:	b087      	sub	sp, #28
     58a:	4680      	mov	r8, r0
     58c:	9104      	str	r1, [sp, #16]
     58e:	0016      	movs	r6, r2
     590:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     592:	2200      	movs	r2, #0
     594:	2300      	movs	r3, #0
     596:	2100      	movs	r1, #0
     598:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     59a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     59c:	2001      	movs	r0, #1
     59e:	0021      	movs	r1, r4
     5a0:	9600      	str	r6, [sp, #0]
     5a2:	9701      	str	r7, [sp, #4]
     5a4:	465c      	mov	r4, fp
     5a6:	9403      	str	r4, [sp, #12]
     5a8:	4644      	mov	r4, r8
     5aa:	9405      	str	r4, [sp, #20]
     5ac:	e013      	b.n	5d6 <long_division+0x5a>
     5ae:	2420      	movs	r4, #32
     5b0:	1a64      	subs	r4, r4, r1
     5b2:	0005      	movs	r5, r0
     5b4:	40e5      	lsrs	r5, r4
     5b6:	46a8      	mov	r8, r5
     5b8:	e014      	b.n	5e4 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     5ba:	9c00      	ldr	r4, [sp, #0]
     5bc:	9d01      	ldr	r5, [sp, #4]
     5be:	1b12      	subs	r2, r2, r4
     5c0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     5c2:	465c      	mov	r4, fp
     5c4:	464d      	mov	r5, r9
     5c6:	432c      	orrs	r4, r5
     5c8:	46a3      	mov	fp, r4
     5ca:	9c03      	ldr	r4, [sp, #12]
     5cc:	4645      	mov	r5, r8
     5ce:	432c      	orrs	r4, r5
     5d0:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     5d2:	3901      	subs	r1, #1
     5d4:	d325      	bcc.n	622 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     5d6:	2420      	movs	r4, #32
     5d8:	4264      	negs	r4, r4
     5da:	190c      	adds	r4, r1, r4
     5dc:	d4e7      	bmi.n	5ae <long_division+0x32>
     5de:	0005      	movs	r5, r0
     5e0:	40a5      	lsls	r5, r4
     5e2:	46a8      	mov	r8, r5
     5e4:	0004      	movs	r4, r0
     5e6:	408c      	lsls	r4, r1
     5e8:	46a1      	mov	r9, r4
		r = r << 1;
     5ea:	1892      	adds	r2, r2, r2
     5ec:	415b      	adcs	r3, r3
     5ee:	0014      	movs	r4, r2
     5f0:	001d      	movs	r5, r3
		if (n & bit_shift) {
     5f2:	9e05      	ldr	r6, [sp, #20]
     5f4:	464f      	mov	r7, r9
     5f6:	403e      	ands	r6, r7
     5f8:	46b4      	mov	ip, r6
     5fa:	9e04      	ldr	r6, [sp, #16]
     5fc:	4647      	mov	r7, r8
     5fe:	403e      	ands	r6, r7
     600:	46b2      	mov	sl, r6
     602:	4666      	mov	r6, ip
     604:	4657      	mov	r7, sl
     606:	433e      	orrs	r6, r7
     608:	d003      	beq.n	612 <long_division+0x96>
			r |= 0x01;
     60a:	0006      	movs	r6, r0
     60c:	4326      	orrs	r6, r4
     60e:	0032      	movs	r2, r6
     610:	002b      	movs	r3, r5
		if (r >= d) {
     612:	9c00      	ldr	r4, [sp, #0]
     614:	9d01      	ldr	r5, [sp, #4]
     616:	429d      	cmp	r5, r3
     618:	d8db      	bhi.n	5d2 <long_division+0x56>
     61a:	d1ce      	bne.n	5ba <long_division+0x3e>
     61c:	4294      	cmp	r4, r2
     61e:	d8d8      	bhi.n	5d2 <long_division+0x56>
     620:	e7cb      	b.n	5ba <long_division+0x3e>
     622:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     624:	4658      	mov	r0, fp
     626:	0019      	movs	r1, r3
     628:	b007      	add	sp, #28
     62a:	bc3c      	pop	{r2, r3, r4, r5}
     62c:	4690      	mov	r8, r2
     62e:	4699      	mov	r9, r3
     630:	46a2      	mov	sl, r4
     632:	46ab      	mov	fp, r5
     634:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000636 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     636:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     638:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     63a:	2340      	movs	r3, #64	; 0x40
     63c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     63e:	4281      	cmp	r1, r0
     640:	d202      	bcs.n	648 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     642:	0018      	movs	r0, r3
     644:	bd10      	pop	{r4, pc}
		baud_calculated++;
     646:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     648:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     64a:	1c63      	adds	r3, r4, #1
     64c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     64e:	4288      	cmp	r0, r1
     650:	d9f9      	bls.n	646 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     652:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     654:	2cff      	cmp	r4, #255	; 0xff
     656:	d8f4      	bhi.n	642 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     658:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     65a:	2300      	movs	r3, #0
     65c:	e7f1      	b.n	642 <_sercom_get_sync_baud_val+0xc>
	...

00000660 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     660:	b5f0      	push	{r4, r5, r6, r7, lr}
     662:	b083      	sub	sp, #12
     664:	000f      	movs	r7, r1
     666:	0016      	movs	r6, r2
     668:	aa08      	add	r2, sp, #32
     66a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     66c:	0004      	movs	r4, r0
     66e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     670:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     672:	42bc      	cmp	r4, r7
     674:	d902      	bls.n	67c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     676:	0010      	movs	r0, r2
     678:	b003      	add	sp, #12
     67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     67c:	2b00      	cmp	r3, #0
     67e:	d114      	bne.n	6aa <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     680:	0002      	movs	r2, r0
     682:	0008      	movs	r0, r1
     684:	2100      	movs	r1, #0
     686:	4c19      	ldr	r4, [pc, #100]	; (6ec <_sercom_get_async_baud_val+0x8c>)
     688:	47a0      	blx	r4
     68a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     68c:	003a      	movs	r2, r7
     68e:	2300      	movs	r3, #0
     690:	2000      	movs	r0, #0
     692:	4c17      	ldr	r4, [pc, #92]	; (6f0 <_sercom_get_async_baud_val+0x90>)
     694:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     696:	2200      	movs	r2, #0
     698:	2301      	movs	r3, #1
     69a:	1a12      	subs	r2, r2, r0
     69c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     69e:	0c12      	lsrs	r2, r2, #16
     6a0:	041b      	lsls	r3, r3, #16
     6a2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     6a4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     6a6:	2200      	movs	r2, #0
     6a8:	e7e5      	b.n	676 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     6aa:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     6ac:	2b01      	cmp	r3, #1
     6ae:	d1f9      	bne.n	6a4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     6b0:	000a      	movs	r2, r1
     6b2:	2300      	movs	r3, #0
     6b4:	2100      	movs	r1, #0
     6b6:	4c0d      	ldr	r4, [pc, #52]	; (6ec <_sercom_get_async_baud_val+0x8c>)
     6b8:	47a0      	blx	r4
     6ba:	0002      	movs	r2, r0
     6bc:	000b      	movs	r3, r1
     6be:	9200      	str	r2, [sp, #0]
     6c0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     6c2:	0038      	movs	r0, r7
     6c4:	2100      	movs	r1, #0
     6c6:	4c0a      	ldr	r4, [pc, #40]	; (6f0 <_sercom_get_async_baud_val+0x90>)
     6c8:	47a0      	blx	r4
     6ca:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     6cc:	2380      	movs	r3, #128	; 0x80
     6ce:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     6d0:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     6d2:	4298      	cmp	r0, r3
     6d4:	d8cf      	bhi.n	676 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     6d6:	0f79      	lsrs	r1, r7, #29
     6d8:	00f8      	lsls	r0, r7, #3
     6da:	9a00      	ldr	r2, [sp, #0]
     6dc:	9b01      	ldr	r3, [sp, #4]
     6de:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     6e0:	00ea      	lsls	r2, r5, #3
     6e2:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     6e4:	b2d2      	uxtb	r2, r2
     6e6:	0352      	lsls	r2, r2, #13
     6e8:	432a      	orrs	r2, r5
     6ea:	e7db      	b.n	6a4 <_sercom_get_async_baud_val+0x44>
     6ec:	00001d05 	.word	0x00001d05
     6f0:	0000057d 	.word	0x0000057d

000006f4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     6f4:	b510      	push	{r4, lr}
     6f6:	b082      	sub	sp, #8
     6f8:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     6fa:	4b0e      	ldr	r3, [pc, #56]	; (734 <sercom_set_gclk_generator+0x40>)
     6fc:	781b      	ldrb	r3, [r3, #0]
     6fe:	2b00      	cmp	r3, #0
     700:	d007      	beq.n	712 <sercom_set_gclk_generator+0x1e>
     702:	2900      	cmp	r1, #0
     704:	d105      	bne.n	712 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     706:	4b0b      	ldr	r3, [pc, #44]	; (734 <sercom_set_gclk_generator+0x40>)
     708:	785b      	ldrb	r3, [r3, #1]
     70a:	4283      	cmp	r3, r0
     70c:	d010      	beq.n	730 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     70e:	201d      	movs	r0, #29
     710:	e00c      	b.n	72c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     712:	a901      	add	r1, sp, #4
     714:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     716:	200d      	movs	r0, #13
     718:	4b07      	ldr	r3, [pc, #28]	; (738 <sercom_set_gclk_generator+0x44>)
     71a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     71c:	200d      	movs	r0, #13
     71e:	4b07      	ldr	r3, [pc, #28]	; (73c <sercom_set_gclk_generator+0x48>)
     720:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     722:	4b04      	ldr	r3, [pc, #16]	; (734 <sercom_set_gclk_generator+0x40>)
     724:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     726:	2201      	movs	r2, #1
     728:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     72a:	2000      	movs	r0, #0
}
     72c:	b002      	add	sp, #8
     72e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     730:	2000      	movs	r0, #0
     732:	e7fb      	b.n	72c <sercom_set_gclk_generator+0x38>
     734:	20000090 	.word	0x20000090
     738:	00001509 	.word	0x00001509
     73c:	0000147d 	.word	0x0000147d

00000740 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     740:	4b20      	ldr	r3, [pc, #128]	; (7c4 <_sercom_get_default_pad+0x84>)
     742:	4298      	cmp	r0, r3
     744:	d017      	beq.n	776 <_sercom_get_default_pad+0x36>
     746:	4b20      	ldr	r3, [pc, #128]	; (7c8 <_sercom_get_default_pad+0x88>)
     748:	4298      	cmp	r0, r3
     74a:	d024      	beq.n	796 <_sercom_get_default_pad+0x56>
     74c:	4b1f      	ldr	r3, [pc, #124]	; (7cc <_sercom_get_default_pad+0x8c>)
     74e:	4298      	cmp	r0, r3
     750:	d001      	beq.n	756 <_sercom_get_default_pad+0x16>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     752:	2000      	movs	r0, #0
}
     754:	4770      	bx	lr
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     756:	2901      	cmp	r1, #1
     758:	d007      	beq.n	76a <_sercom_get_default_pad+0x2a>
     75a:	2900      	cmp	r1, #0
     75c:	d02b      	beq.n	7b6 <_sercom_get_default_pad+0x76>
     75e:	2902      	cmp	r1, #2
     760:	d005      	beq.n	76e <_sercom_get_default_pad+0x2e>
     762:	2903      	cmp	r1, #3
     764:	d005      	beq.n	772 <_sercom_get_default_pad+0x32>
	return 0;
     766:	2000      	movs	r0, #0
     768:	e7f4      	b.n	754 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     76a:	4819      	ldr	r0, [pc, #100]	; (7d0 <_sercom_get_default_pad+0x90>)
     76c:	e7f2      	b.n	754 <_sercom_get_default_pad+0x14>
     76e:	4819      	ldr	r0, [pc, #100]	; (7d4 <_sercom_get_default_pad+0x94>)
     770:	e7f0      	b.n	754 <_sercom_get_default_pad+0x14>
     772:	4819      	ldr	r0, [pc, #100]	; (7d8 <_sercom_get_default_pad+0x98>)
     774:	e7ee      	b.n	754 <_sercom_get_default_pad+0x14>
     776:	2901      	cmp	r1, #1
     778:	d007      	beq.n	78a <_sercom_get_default_pad+0x4a>
     77a:	2900      	cmp	r1, #0
     77c:	d01d      	beq.n	7ba <_sercom_get_default_pad+0x7a>
     77e:	2902      	cmp	r1, #2
     780:	d005      	beq.n	78e <_sercom_get_default_pad+0x4e>
     782:	2903      	cmp	r1, #3
     784:	d005      	beq.n	792 <_sercom_get_default_pad+0x52>
	return 0;
     786:	2000      	movs	r0, #0
     788:	e7e4      	b.n	754 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     78a:	4814      	ldr	r0, [pc, #80]	; (7dc <_sercom_get_default_pad+0x9c>)
     78c:	e7e2      	b.n	754 <_sercom_get_default_pad+0x14>
     78e:	4814      	ldr	r0, [pc, #80]	; (7e0 <_sercom_get_default_pad+0xa0>)
     790:	e7e0      	b.n	754 <_sercom_get_default_pad+0x14>
     792:	4814      	ldr	r0, [pc, #80]	; (7e4 <_sercom_get_default_pad+0xa4>)
     794:	e7de      	b.n	754 <_sercom_get_default_pad+0x14>
     796:	2901      	cmp	r1, #1
     798:	d007      	beq.n	7aa <_sercom_get_default_pad+0x6a>
     79a:	2900      	cmp	r1, #0
     79c:	d00f      	beq.n	7be <_sercom_get_default_pad+0x7e>
     79e:	2902      	cmp	r1, #2
     7a0:	d005      	beq.n	7ae <_sercom_get_default_pad+0x6e>
     7a2:	2903      	cmp	r1, #3
     7a4:	d005      	beq.n	7b2 <_sercom_get_default_pad+0x72>
	return 0;
     7a6:	2000      	movs	r0, #0
     7a8:	e7d4      	b.n	754 <_sercom_get_default_pad+0x14>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     7aa:	480f      	ldr	r0, [pc, #60]	; (7e8 <_sercom_get_default_pad+0xa8>)
     7ac:	e7d2      	b.n	754 <_sercom_get_default_pad+0x14>
     7ae:	480f      	ldr	r0, [pc, #60]	; (7ec <_sercom_get_default_pad+0xac>)
     7b0:	e7d0      	b.n	754 <_sercom_get_default_pad+0x14>
     7b2:	480f      	ldr	r0, [pc, #60]	; (7f0 <_sercom_get_default_pad+0xb0>)
     7b4:	e7ce      	b.n	754 <_sercom_get_default_pad+0x14>
     7b6:	480f      	ldr	r0, [pc, #60]	; (7f4 <_sercom_get_default_pad+0xb4>)
     7b8:	e7cc      	b.n	754 <_sercom_get_default_pad+0x14>
     7ba:	480f      	ldr	r0, [pc, #60]	; (7f8 <_sercom_get_default_pad+0xb8>)
     7bc:	e7ca      	b.n	754 <_sercom_get_default_pad+0x14>
     7be:	480f      	ldr	r0, [pc, #60]	; (7fc <_sercom_get_default_pad+0xbc>)
     7c0:	e7c8      	b.n	754 <_sercom_get_default_pad+0x14>
     7c2:	46c0      	nop			; (mov r8, r8)
     7c4:	42000c00 	.word	0x42000c00
     7c8:	42001000 	.word	0x42001000
     7cc:	42000800 	.word	0x42000800
     7d0:	00050003 	.word	0x00050003
     7d4:	00060003 	.word	0x00060003
     7d8:	00070003 	.word	0x00070003
     7dc:	00170002 	.word	0x00170002
     7e0:	001e0003 	.word	0x001e0003
     7e4:	001f0003 	.word	0x001f0003
     7e8:	00170003 	.word	0x00170003
     7ec:	00100003 	.word	0x00100003
     7f0:	00190003 	.word	0x00190003
     7f4:	00040003 	.word	0x00040003
     7f8:	00160002 	.word	0x00160002
     7fc:	00160003 	.word	0x00160003

00000800 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     800:	b530      	push	{r4, r5, lr}
     802:	b085      	sub	sp, #20
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     804:	aa01      	add	r2, sp, #4
     806:	4b0b      	ldr	r3, [pc, #44]	; (834 <_sercom_get_sercom_inst_index+0x34>)
     808:	cb32      	ldmia	r3!, {r1, r4, r5}
     80a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     80c:	0003      	movs	r3, r0
     80e:	9a01      	ldr	r2, [sp, #4]
     810:	4282      	cmp	r2, r0
     812:	d00c      	beq.n	82e <_sercom_get_sercom_inst_index+0x2e>
     814:	9a02      	ldr	r2, [sp, #8]
     816:	4282      	cmp	r2, r0
     818:	d007      	beq.n	82a <_sercom_get_sercom_inst_index+0x2a>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     81a:	2000      	movs	r0, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     81c:	9a03      	ldr	r2, [sp, #12]
     81e:	429a      	cmp	r2, r3
     820:	d001      	beq.n	826 <_sercom_get_sercom_inst_index+0x26>
}
     822:	b005      	add	sp, #20
     824:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     826:	3002      	adds	r0, #2
     828:	e002      	b.n	830 <_sercom_get_sercom_inst_index+0x30>
     82a:	2001      	movs	r0, #1
     82c:	e000      	b.n	830 <_sercom_get_sercom_inst_index+0x30>
     82e:	2000      	movs	r0, #0
			return i;
     830:	b2c0      	uxtb	r0, r0
     832:	e7f6      	b.n	822 <_sercom_get_sercom_inst_index+0x22>
     834:	00001ea8 	.word	0x00001ea8

00000838 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     838:	4770      	bx	lr
	...

0000083c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     83c:	b530      	push	{r4, r5, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     83e:	4b0a      	ldr	r3, [pc, #40]	; (868 <_sercom_set_handler+0x2c>)
     840:	781b      	ldrb	r3, [r3, #0]
     842:	2b00      	cmp	r3, #0
     844:	d10c      	bne.n	860 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     846:	4c09      	ldr	r4, [pc, #36]	; (86c <_sercom_set_handler+0x30>)
     848:	4d09      	ldr	r5, [pc, #36]	; (870 <_sercom_set_handler+0x34>)
     84a:	6025      	str	r5, [r4, #0]
			_sercom_instances[i] = NULL;
     84c:	4b09      	ldr	r3, [pc, #36]	; (874 <_sercom_set_handler+0x38>)
     84e:	2200      	movs	r2, #0
     850:	601a      	str	r2, [r3, #0]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     852:	6065      	str	r5, [r4, #4]
			_sercom_instances[i] = NULL;
     854:	605a      	str	r2, [r3, #4]
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     856:	60a5      	str	r5, [r4, #8]
			_sercom_instances[i] = NULL;
     858:	609a      	str	r2, [r3, #8]
		}

		_handler_table_initialized = true;
     85a:	3201      	adds	r2, #1
     85c:	4b02      	ldr	r3, [pc, #8]	; (868 <_sercom_set_handler+0x2c>)
     85e:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     860:	0080      	lsls	r0, r0, #2
     862:	4b02      	ldr	r3, [pc, #8]	; (86c <_sercom_set_handler+0x30>)
     864:	50c1      	str	r1, [r0, r3]
}
     866:	bd30      	pop	{r4, r5, pc}
     868:	20000092 	.word	0x20000092
     86c:	20000094 	.word	0x20000094
     870:	00000839 	.word	0x00000839
     874:	200000e4 	.word	0x200000e4

00000878 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     878:	b510      	push	{r4, lr}
     87a:	b082      	sub	sp, #8
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     87c:	ac01      	add	r4, sp, #4
     87e:	2309      	movs	r3, #9
     880:	7023      	strb	r3, [r4, #0]
     882:	3301      	adds	r3, #1
     884:	7063      	strb	r3, [r4, #1]
     886:	3301      	adds	r3, #1
     888:	70a3      	strb	r3, [r4, #2]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     88a:	4b02      	ldr	r3, [pc, #8]	; (894 <_sercom_get_interrupt_vector+0x1c>)
     88c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     88e:	5620      	ldrsb	r0, [r4, r0]
}
     890:	b002      	add	sp, #8
     892:	bd10      	pop	{r4, pc}
     894:	00000801 	.word	0x00000801

00000898 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     898:	b510      	push	{r4, lr}
     89a:	4b02      	ldr	r3, [pc, #8]	; (8a4 <SERCOM0_Handler+0xc>)
     89c:	681b      	ldr	r3, [r3, #0]
     89e:	2000      	movs	r0, #0
     8a0:	4798      	blx	r3
     8a2:	bd10      	pop	{r4, pc}
     8a4:	20000094 	.word	0x20000094

000008a8 <SERCOM1_Handler>:
     8a8:	b510      	push	{r4, lr}
     8aa:	4b02      	ldr	r3, [pc, #8]	; (8b4 <SERCOM1_Handler+0xc>)
     8ac:	685b      	ldr	r3, [r3, #4]
     8ae:	2001      	movs	r0, #1
     8b0:	4798      	blx	r3
     8b2:	bd10      	pop	{r4, pc}
     8b4:	20000094 	.word	0x20000094

000008b8 <SERCOM2_Handler>:
     8b8:	b510      	push	{r4, lr}
     8ba:	4b02      	ldr	r3, [pc, #8]	; (8c4 <SERCOM2_Handler+0xc>)
     8bc:	689b      	ldr	r3, [r3, #8]
     8be:	2002      	movs	r0, #2
     8c0:	4798      	blx	r3
     8c2:	bd10      	pop	{r4, pc}
     8c4:	20000094 	.word	0x20000094

000008c8 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
     8ca:	46de      	mov	lr, fp
     8cc:	4657      	mov	r7, sl
     8ce:	464e      	mov	r6, r9
     8d0:	4645      	mov	r5, r8
     8d2:	b5e0      	push	{r5, r6, r7, lr}
     8d4:	b091      	sub	sp, #68	; 0x44
     8d6:	0005      	movs	r5, r0
     8d8:	000c      	movs	r4, r1
     8da:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     8dc:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     8de:	0008      	movs	r0, r1
     8e0:	4bbc      	ldr	r3, [pc, #752]	; (bd4 <usart_init+0x30c>)
     8e2:	4798      	blx	r3
     8e4:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     8e6:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     8e8:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     8ea:	07db      	lsls	r3, r3, #31
     8ec:	d506      	bpl.n	8fc <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     8ee:	b011      	add	sp, #68	; 0x44
     8f0:	bc3c      	pop	{r2, r3, r4, r5}
     8f2:	4690      	mov	r8, r2
     8f4:	4699      	mov	r9, r3
     8f6:	46a2      	mov	sl, r4
     8f8:	46ab      	mov	fp, r5
     8fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     8fc:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     8fe:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     900:	079b      	lsls	r3, r3, #30
     902:	d4f4      	bmi.n	8ee <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     904:	49b4      	ldr	r1, [pc, #720]	; (bd8 <usart_init+0x310>)
     906:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     908:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     90a:	2301      	movs	r3, #1
     90c:	40bb      	lsls	r3, r7
     90e:	4303      	orrs	r3, r0
     910:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     912:	a90f      	add	r1, sp, #60	; 0x3c
     914:	272d      	movs	r7, #45	; 0x2d
     916:	5df3      	ldrb	r3, [r6, r7]
     918:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     91a:	320e      	adds	r2, #14
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     91c:	b2d3      	uxtb	r3, r2
     91e:	9302      	str	r3, [sp, #8]
     920:	0018      	movs	r0, r3
     922:	4bae      	ldr	r3, [pc, #696]	; (bdc <usart_init+0x314>)
     924:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     926:	9802      	ldr	r0, [sp, #8]
     928:	4bad      	ldr	r3, [pc, #692]	; (be0 <usart_init+0x318>)
     92a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     92c:	5df0      	ldrb	r0, [r6, r7]
     92e:	2100      	movs	r1, #0
     930:	4bac      	ldr	r3, [pc, #688]	; (be4 <usart_init+0x31c>)
     932:	4798      	blx	r3
	module->character_size = config->character_size;
     934:	7af3      	ldrb	r3, [r6, #11]
     936:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     938:	2324      	movs	r3, #36	; 0x24
     93a:	5cf3      	ldrb	r3, [r6, r3]
     93c:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     93e:	2325      	movs	r3, #37	; 0x25
     940:	5cf3      	ldrb	r3, [r6, r3]
     942:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     944:	7ef3      	ldrb	r3, [r6, #27]
     946:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     948:	7f33      	ldrb	r3, [r6, #28]
     94a:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     94c:	682b      	ldr	r3, [r5, #0]
     94e:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     950:	0018      	movs	r0, r3
     952:	4ba0      	ldr	r3, [pc, #640]	; (bd4 <usart_init+0x30c>)
     954:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     956:	300e      	adds	r0, #14
	uint16_t baud  = 0;
     958:	2200      	movs	r2, #0
     95a:	230e      	movs	r3, #14
     95c:	a906      	add	r1, sp, #24
     95e:	468c      	mov	ip, r1
     960:	4463      	add	r3, ip
     962:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     964:	8a32      	ldrh	r2, [r6, #16]
     966:	9202      	str	r2, [sp, #8]
     968:	2380      	movs	r3, #128	; 0x80
     96a:	01db      	lsls	r3, r3, #7
     96c:	429a      	cmp	r2, r3
     96e:	d100      	bne.n	972 <usart_init+0xaa>
     970:	e09e      	b.n	ab0 <usart_init+0x1e8>
     972:	d90f      	bls.n	994 <usart_init+0xcc>
     974:	23c0      	movs	r3, #192	; 0xc0
     976:	01db      	lsls	r3, r3, #7
     978:	9a02      	ldr	r2, [sp, #8]
     97a:	429a      	cmp	r2, r3
     97c:	d100      	bne.n	980 <usart_init+0xb8>
     97e:	e092      	b.n	aa6 <usart_init+0x1de>
     980:	2380      	movs	r3, #128	; 0x80
     982:	021b      	lsls	r3, r3, #8
     984:	429a      	cmp	r2, r3
     986:	d000      	beq.n	98a <usart_init+0xc2>
     988:	e11f      	b.n	bca <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     98a:	2303      	movs	r3, #3
     98c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     98e:	2300      	movs	r3, #0
     990:	9307      	str	r3, [sp, #28]
     992:	e008      	b.n	9a6 <usart_init+0xde>
	switch (config->sample_rate) {
     994:	2380      	movs	r3, #128	; 0x80
     996:	019b      	lsls	r3, r3, #6
     998:	429a      	cmp	r2, r3
     99a:	d000      	beq.n	99e <usart_init+0xd6>
     99c:	e115      	b.n	bca <usart_init+0x302>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     99e:	2310      	movs	r3, #16
     9a0:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     9a2:	3b0f      	subs	r3, #15
     9a4:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     9a6:	6833      	ldr	r3, [r6, #0]
     9a8:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     9aa:	68f3      	ldr	r3, [r6, #12]
     9ac:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     9ae:	6973      	ldr	r3, [r6, #20]
     9b0:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     9b2:	7e33      	ldrb	r3, [r6, #24]
     9b4:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     9b6:	2326      	movs	r3, #38	; 0x26
     9b8:	5cf3      	ldrb	r3, [r6, r3]
     9ba:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     9bc:	6873      	ldr	r3, [r6, #4]
     9be:	4699      	mov	r9, r3
	switch (transfer_mode)
     9c0:	2b00      	cmp	r3, #0
     9c2:	d100      	bne.n	9c6 <usart_init+0xfe>
     9c4:	e0a0      	b.n	b08 <usart_init+0x240>
     9c6:	2380      	movs	r3, #128	; 0x80
     9c8:	055b      	lsls	r3, r3, #21
     9ca:	4599      	cmp	r9, r3
     9cc:	d100      	bne.n	9d0 <usart_init+0x108>
     9ce:	e084      	b.n	ada <usart_init+0x212>
	if(config->encoding_format_enable) {
     9d0:	7e73      	ldrb	r3, [r6, #25]
     9d2:	2b00      	cmp	r3, #0
     9d4:	d002      	beq.n	9dc <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     9d6:	7eb3      	ldrb	r3, [r6, #26]
     9d8:	4642      	mov	r2, r8
     9da:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     9dc:	682a      	ldr	r2, [r5, #0]
     9de:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     9e0:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     9e2:	2b00      	cmp	r3, #0
     9e4:	d1fc      	bne.n	9e0 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     9e6:	330e      	adds	r3, #14
     9e8:	aa06      	add	r2, sp, #24
     9ea:	4694      	mov	ip, r2
     9ec:	4463      	add	r3, ip
     9ee:	881b      	ldrh	r3, [r3, #0]
     9f0:	4642      	mov	r2, r8
     9f2:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     9f4:	9b05      	ldr	r3, [sp, #20]
     9f6:	9a03      	ldr	r2, [sp, #12]
     9f8:	4313      	orrs	r3, r2
     9fa:	9a04      	ldr	r2, [sp, #16]
     9fc:	4313      	orrs	r3, r2
     9fe:	464a      	mov	r2, r9
     a00:	4313      	orrs	r3, r2
     a02:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     a04:	465b      	mov	r3, fp
     a06:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     a08:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     a0a:	4653      	mov	r3, sl
     a0c:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     a0e:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     a10:	2327      	movs	r3, #39	; 0x27
     a12:	5cf3      	ldrb	r3, [r6, r3]
     a14:	2b00      	cmp	r3, #0
     a16:	d101      	bne.n	a1c <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     a18:	3304      	adds	r3, #4
     a1a:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     a1c:	7e73      	ldrb	r3, [r6, #25]
     a1e:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     a20:	7f32      	ldrb	r2, [r6, #28]
     a22:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     a24:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     a26:	7f72      	ldrb	r2, [r6, #29]
     a28:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     a2a:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     a2c:	2224      	movs	r2, #36	; 0x24
     a2e:	5cb2      	ldrb	r2, [r6, r2]
     a30:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     a32:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     a34:	2225      	movs	r2, #37	; 0x25
     a36:	5cb2      	ldrb	r2, [r6, r2]
     a38:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     a3a:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     a3c:	7ab1      	ldrb	r1, [r6, #10]
     a3e:	7af2      	ldrb	r2, [r6, #11]
     a40:	4311      	orrs	r1, r2
     a42:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     a44:	8933      	ldrh	r3, [r6, #8]
     a46:	2bff      	cmp	r3, #255	; 0xff
     a48:	d100      	bne.n	a4c <usart_init+0x184>
     a4a:	e081      	b.n	b50 <usart_init+0x288>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     a4c:	2280      	movs	r2, #128	; 0x80
     a4e:	0452      	lsls	r2, r2, #17
     a50:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     a52:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     a54:	232c      	movs	r3, #44	; 0x2c
     a56:	5cf3      	ldrb	r3, [r6, r3]
     a58:	2b00      	cmp	r3, #0
     a5a:	d103      	bne.n	a64 <usart_init+0x19c>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     a5c:	4b62      	ldr	r3, [pc, #392]	; (be8 <usart_init+0x320>)
     a5e:	789b      	ldrb	r3, [r3, #2]
     a60:	079b      	lsls	r3, r3, #30
     a62:	d501      	bpl.n	a68 <usart_init+0x1a0>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     a64:	2380      	movs	r3, #128	; 0x80
     a66:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     a68:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     a6a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     a6c:	2b00      	cmp	r3, #0
     a6e:	d1fc      	bne.n	a6a <usart_init+0x1a2>
	usart_hw->CTRLB.reg = ctrlb;
     a70:	4643      	mov	r3, r8
     a72:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     a74:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     a76:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     a78:	2b00      	cmp	r3, #0
     a7a:	d1fc      	bne.n	a76 <usart_init+0x1ae>
	usart_hw->CTRLA.reg = ctrla;
     a7c:	4643      	mov	r3, r8
     a7e:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a80:	ab0e      	add	r3, sp, #56	; 0x38
     a82:	2280      	movs	r2, #128	; 0x80
     a84:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a86:	2200      	movs	r2, #0
     a88:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     a8a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     a8c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     a8e:	6b33      	ldr	r3, [r6, #48]	; 0x30
     a90:	930a      	str	r3, [sp, #40]	; 0x28
     a92:	6b73      	ldr	r3, [r6, #52]	; 0x34
     a94:	930b      	str	r3, [sp, #44]	; 0x2c
     a96:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     a98:	930c      	str	r3, [sp, #48]	; 0x30
     a9a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     a9c:	9302      	str	r3, [sp, #8]
     a9e:	930d      	str	r3, [sp, #52]	; 0x34
     aa0:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     aa2:	ae0a      	add	r6, sp, #40	; 0x28
     aa4:	e063      	b.n	b6e <usart_init+0x2a6>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     aa6:	2308      	movs	r3, #8
     aa8:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     aaa:	3b07      	subs	r3, #7
     aac:	9307      	str	r3, [sp, #28]
     aae:	e77a      	b.n	9a6 <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     ab0:	6833      	ldr	r3, [r6, #0]
     ab2:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     ab4:	68f3      	ldr	r3, [r6, #12]
     ab6:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
     ab8:	6973      	ldr	r3, [r6, #20]
     aba:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     abc:	7e33      	ldrb	r3, [r6, #24]
     abe:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     ac0:	2326      	movs	r3, #38	; 0x26
     ac2:	5cf3      	ldrb	r3, [r6, r3]
     ac4:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     ac6:	6873      	ldr	r3, [r6, #4]
     ac8:	4699      	mov	r9, r3
	switch (transfer_mode)
     aca:	2b00      	cmp	r3, #0
     acc:	d018      	beq.n	b00 <usart_init+0x238>
     ace:	2380      	movs	r3, #128	; 0x80
     ad0:	055b      	lsls	r3, r3, #21
     ad2:	4599      	cmp	r9, r3
     ad4:	d001      	beq.n	ada <usart_init+0x212>
	enum status_code status_code = STATUS_OK;
     ad6:	2000      	movs	r0, #0
     ad8:	e025      	b.n	b26 <usart_init+0x25e>
			if (!config->use_external_clock) {
     ada:	2327      	movs	r3, #39	; 0x27
     adc:	5cf3      	ldrb	r3, [r6, r3]
     ade:	2b00      	cmp	r3, #0
     ae0:	d000      	beq.n	ae4 <usart_init+0x21c>
     ae2:	e775      	b.n	9d0 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     ae4:	6a33      	ldr	r3, [r6, #32]
     ae6:	001f      	movs	r7, r3
     ae8:	b2c0      	uxtb	r0, r0
     aea:	4b40      	ldr	r3, [pc, #256]	; (bec <usart_init+0x324>)
     aec:	4798      	blx	r3
     aee:	0001      	movs	r1, r0
     af0:	220e      	movs	r2, #14
     af2:	ab06      	add	r3, sp, #24
     af4:	469c      	mov	ip, r3
     af6:	4462      	add	r2, ip
     af8:	0038      	movs	r0, r7
     afa:	4b3d      	ldr	r3, [pc, #244]	; (bf0 <usart_init+0x328>)
     afc:	4798      	blx	r3
     afe:	e012      	b.n	b26 <usart_init+0x25e>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     b00:	2308      	movs	r3, #8
     b02:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     b04:	2300      	movs	r3, #0
     b06:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     b08:	2327      	movs	r3, #39	; 0x27
     b0a:	5cf3      	ldrb	r3, [r6, r3]
     b0c:	2b00      	cmp	r3, #0
     b0e:	d00e      	beq.n	b2e <usart_init+0x266>
				status_code =
     b10:	9b06      	ldr	r3, [sp, #24]
     b12:	9300      	str	r3, [sp, #0]
     b14:	9b07      	ldr	r3, [sp, #28]
     b16:	220e      	movs	r2, #14
     b18:	a906      	add	r1, sp, #24
     b1a:	468c      	mov	ip, r1
     b1c:	4462      	add	r2, ip
     b1e:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     b20:	6a30      	ldr	r0, [r6, #32]
     b22:	4f34      	ldr	r7, [pc, #208]	; (bf4 <usart_init+0x32c>)
     b24:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     b26:	2800      	cmp	r0, #0
     b28:	d000      	beq.n	b2c <usart_init+0x264>
     b2a:	e6e0      	b.n	8ee <usart_init+0x26>
     b2c:	e750      	b.n	9d0 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     b2e:	6a33      	ldr	r3, [r6, #32]
     b30:	001f      	movs	r7, r3
     b32:	b2c0      	uxtb	r0, r0
     b34:	4b2d      	ldr	r3, [pc, #180]	; (bec <usart_init+0x324>)
     b36:	4798      	blx	r3
     b38:	0001      	movs	r1, r0
				status_code =
     b3a:	9b06      	ldr	r3, [sp, #24]
     b3c:	9300      	str	r3, [sp, #0]
     b3e:	9b07      	ldr	r3, [sp, #28]
     b40:	220e      	movs	r2, #14
     b42:	a806      	add	r0, sp, #24
     b44:	4684      	mov	ip, r0
     b46:	4462      	add	r2, ip
     b48:	0038      	movs	r0, r7
     b4a:	4f2a      	ldr	r7, [pc, #168]	; (bf4 <usart_init+0x32c>)
     b4c:	47b8      	blx	r7
     b4e:	e7ea      	b.n	b26 <usart_init+0x25e>
		if(config->lin_slave_enable) {
     b50:	7ef3      	ldrb	r3, [r6, #27]
     b52:	2b00      	cmp	r3, #0
     b54:	d100      	bne.n	b58 <usart_init+0x290>
     b56:	e77d      	b.n	a54 <usart_init+0x18c>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     b58:	2380      	movs	r3, #128	; 0x80
     b5a:	04db      	lsls	r3, r3, #19
     b5c:	431f      	orrs	r7, r3
     b5e:	e779      	b.n	a54 <usart_init+0x18c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     b60:	0020      	movs	r0, r4
     b62:	4b25      	ldr	r3, [pc, #148]	; (bf8 <usart_init+0x330>)
     b64:	4798      	blx	r3
     b66:	e007      	b.n	b78 <usart_init+0x2b0>
     b68:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     b6a:	2f04      	cmp	r7, #4
     b6c:	d00d      	beq.n	b8a <usart_init+0x2c2>
     b6e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     b70:	00bb      	lsls	r3, r7, #2
     b72:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     b74:	2800      	cmp	r0, #0
     b76:	d0f3      	beq.n	b60 <usart_init+0x298>
		if (current_pinmux != PINMUX_UNUSED) {
     b78:	1c43      	adds	r3, r0, #1
     b7a:	d0f5      	beq.n	b68 <usart_init+0x2a0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     b7c:	a90e      	add	r1, sp, #56	; 0x38
     b7e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     b80:	0c00      	lsrs	r0, r0, #16
     b82:	b2c0      	uxtb	r0, r0
     b84:	4b1d      	ldr	r3, [pc, #116]	; (bfc <usart_init+0x334>)
     b86:	4798      	blx	r3
     b88:	e7ee      	b.n	b68 <usart_init+0x2a0>
		module->callback[i]            = NULL;
     b8a:	2300      	movs	r3, #0
     b8c:	60eb      	str	r3, [r5, #12]
     b8e:	612b      	str	r3, [r5, #16]
     b90:	616b      	str	r3, [r5, #20]
     b92:	61ab      	str	r3, [r5, #24]
     b94:	61eb      	str	r3, [r5, #28]
     b96:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     b98:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     b9a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     b9c:	2200      	movs	r2, #0
     b9e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     ba0:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     ba2:	3330      	adds	r3, #48	; 0x30
     ba4:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     ba6:	3301      	adds	r3, #1
     ba8:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     baa:	3301      	adds	r3, #1
     bac:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     bae:	3301      	adds	r3, #1
     bb0:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     bb2:	6828      	ldr	r0, [r5, #0]
     bb4:	4b07      	ldr	r3, [pc, #28]	; (bd4 <usart_init+0x30c>)
     bb6:	4798      	blx	r3
     bb8:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     bba:	4911      	ldr	r1, [pc, #68]	; (c00 <usart_init+0x338>)
     bbc:	4b11      	ldr	r3, [pc, #68]	; (c04 <usart_init+0x33c>)
     bbe:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     bc0:	00a4      	lsls	r4, r4, #2
     bc2:	4b11      	ldr	r3, [pc, #68]	; (c08 <usart_init+0x340>)
     bc4:	50e5      	str	r5, [r4, r3]
	return status_code;
     bc6:	2000      	movs	r0, #0
     bc8:	e691      	b.n	8ee <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     bca:	2310      	movs	r3, #16
     bcc:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     bce:	2300      	movs	r3, #0
     bd0:	9307      	str	r3, [sp, #28]
     bd2:	e6e8      	b.n	9a6 <usart_init+0xde>
     bd4:	00000801 	.word	0x00000801
     bd8:	40000400 	.word	0x40000400
     bdc:	00001509 	.word	0x00001509
     be0:	0000147d 	.word	0x0000147d
     be4:	000006f5 	.word	0x000006f5
     be8:	41002000 	.word	0x41002000
     bec:	00001525 	.word	0x00001525
     bf0:	00000637 	.word	0x00000637
     bf4:	00000661 	.word	0x00000661
     bf8:	00000741 	.word	0x00000741
     bfc:	00001601 	.word	0x00001601
     c00:	00000c25 	.word	0x00000c25
     c04:	0000083d 	.word	0x0000083d
     c08:	200000e4 	.word	0x200000e4

00000c0c <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     c0c:	1c93      	adds	r3, r2, #2
     c0e:	009b      	lsls	r3, r3, #2
     c10:	18c3      	adds	r3, r0, r3
     c12:	6059      	str	r1, [r3, #4]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     c14:	2130      	movs	r1, #48	; 0x30
     c16:	2301      	movs	r3, #1
     c18:	4093      	lsls	r3, r2
     c1a:	001a      	movs	r2, r3
     c1c:	5c43      	ldrb	r3, [r0, r1]
     c1e:	4313      	orrs	r3, r2
     c20:	5443      	strb	r3, [r0, r1]
}
     c22:	4770      	bx	lr

00000c24 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     c26:	0080      	lsls	r0, r0, #2
     c28:	4b62      	ldr	r3, [pc, #392]	; (db4 <_usart_interrupt_handler+0x190>)
     c2a:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     c2c:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     c2e:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     c30:	2b00      	cmp	r3, #0
     c32:	d1fc      	bne.n	c2e <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     c34:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     c36:	7da6      	ldrb	r6, [r4, #22]
     c38:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     c3a:	2330      	movs	r3, #48	; 0x30
     c3c:	5ceb      	ldrb	r3, [r5, r3]
     c3e:	2231      	movs	r2, #49	; 0x31
     c40:	5caf      	ldrb	r7, [r5, r2]
     c42:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     c44:	07f3      	lsls	r3, r6, #31
     c46:	d522      	bpl.n	c8e <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     c48:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     c4a:	b29b      	uxth	r3, r3
     c4c:	2b00      	cmp	r3, #0
     c4e:	d01c      	beq.n	c8a <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     c50:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     c52:	7813      	ldrb	r3, [r2, #0]
     c54:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     c56:	1c51      	adds	r1, r2, #1
     c58:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     c5a:	7969      	ldrb	r1, [r5, #5]
     c5c:	2901      	cmp	r1, #1
     c5e:	d00e      	beq.n	c7e <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     c60:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     c62:	05db      	lsls	r3, r3, #23
     c64:	0ddb      	lsrs	r3, r3, #23
     c66:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     c68:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     c6a:	3b01      	subs	r3, #1
     c6c:	b29b      	uxth	r3, r3
     c6e:	85eb      	strh	r3, [r5, #46]	; 0x2e
     c70:	2b00      	cmp	r3, #0
     c72:	d10c      	bne.n	c8e <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     c74:	3301      	adds	r3, #1
     c76:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     c78:	3301      	adds	r3, #1
     c7a:	75a3      	strb	r3, [r4, #22]
     c7c:	e007      	b.n	c8e <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     c7e:	7851      	ldrb	r1, [r2, #1]
     c80:	0209      	lsls	r1, r1, #8
     c82:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     c84:	3202      	adds	r2, #2
     c86:	62aa      	str	r2, [r5, #40]	; 0x28
     c88:	e7eb      	b.n	c62 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     c8a:	2301      	movs	r3, #1
     c8c:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     c8e:	07b3      	lsls	r3, r6, #30
     c90:	d506      	bpl.n	ca0 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     c92:	2302      	movs	r3, #2
     c94:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     c96:	2200      	movs	r2, #0
     c98:	3331      	adds	r3, #49	; 0x31
     c9a:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     c9c:	07fb      	lsls	r3, r7, #31
     c9e:	d41a      	bmi.n	cd6 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     ca0:	0773      	lsls	r3, r6, #29
     ca2:	d565      	bpl.n	d70 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     ca4:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     ca6:	b29b      	uxth	r3, r3
     ca8:	2b00      	cmp	r3, #0
     caa:	d05f      	beq.n	d6c <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     cac:	8b63      	ldrh	r3, [r4, #26]
     cae:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     cb0:	071a      	lsls	r2, r3, #28
     cb2:	d414      	bmi.n	cde <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     cb4:	223f      	movs	r2, #63	; 0x3f
     cb6:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     cb8:	2b00      	cmp	r3, #0
     cba:	d034      	beq.n	d26 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     cbc:	079a      	lsls	r2, r3, #30
     cbe:	d511      	bpl.n	ce4 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     cc0:	221a      	movs	r2, #26
     cc2:	2332      	movs	r3, #50	; 0x32
     cc4:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     cc6:	3b30      	subs	r3, #48	; 0x30
     cc8:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     cca:	077b      	lsls	r3, r7, #29
     ccc:	d550      	bpl.n	d70 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     cce:	0028      	movs	r0, r5
     cd0:	696b      	ldr	r3, [r5, #20]
     cd2:	4798      	blx	r3
     cd4:	e04c      	b.n	d70 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     cd6:	0028      	movs	r0, r5
     cd8:	68eb      	ldr	r3, [r5, #12]
     cda:	4798      	blx	r3
     cdc:	e7e0      	b.n	ca0 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     cde:	2237      	movs	r2, #55	; 0x37
     ce0:	4013      	ands	r3, r2
     ce2:	e7e9      	b.n	cb8 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     ce4:	075a      	lsls	r2, r3, #29
     ce6:	d505      	bpl.n	cf4 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     ce8:	221e      	movs	r2, #30
     cea:	2332      	movs	r3, #50	; 0x32
     cec:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     cee:	3b2e      	subs	r3, #46	; 0x2e
     cf0:	8363      	strh	r3, [r4, #26]
     cf2:	e7ea      	b.n	cca <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     cf4:	07da      	lsls	r2, r3, #31
     cf6:	d505      	bpl.n	d04 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     cf8:	2213      	movs	r2, #19
     cfa:	2332      	movs	r3, #50	; 0x32
     cfc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     cfe:	3b31      	subs	r3, #49	; 0x31
     d00:	8363      	strh	r3, [r4, #26]
     d02:	e7e2      	b.n	cca <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     d04:	06da      	lsls	r2, r3, #27
     d06:	d505      	bpl.n	d14 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     d08:	2242      	movs	r2, #66	; 0x42
     d0a:	2332      	movs	r3, #50	; 0x32
     d0c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     d0e:	3b22      	subs	r3, #34	; 0x22
     d10:	8363      	strh	r3, [r4, #26]
     d12:	e7da      	b.n	cca <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     d14:	2220      	movs	r2, #32
     d16:	421a      	tst	r2, r3
     d18:	d0d7      	beq.n	cca <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     d1a:	3221      	adds	r2, #33	; 0x21
     d1c:	2332      	movs	r3, #50	; 0x32
     d1e:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     d20:	3b12      	subs	r3, #18
     d22:	8363      	strh	r3, [r4, #26]
     d24:	e7d1      	b.n	cca <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     d26:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     d28:	05db      	lsls	r3, r3, #23
     d2a:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     d2c:	b2da      	uxtb	r2, r3
     d2e:	6a69      	ldr	r1, [r5, #36]	; 0x24
     d30:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     d32:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     d34:	1c51      	adds	r1, r2, #1
     d36:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     d38:	7969      	ldrb	r1, [r5, #5]
     d3a:	2901      	cmp	r1, #1
     d3c:	d010      	beq.n	d60 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     d3e:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     d40:	3b01      	subs	r3, #1
     d42:	b29b      	uxth	r3, r3
     d44:	85ab      	strh	r3, [r5, #44]	; 0x2c
     d46:	2b00      	cmp	r3, #0
     d48:	d112      	bne.n	d70 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     d4a:	3304      	adds	r3, #4
     d4c:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     d4e:	2200      	movs	r2, #0
     d50:	332e      	adds	r3, #46	; 0x2e
     d52:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     d54:	07bb      	lsls	r3, r7, #30
     d56:	d50b      	bpl.n	d70 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     d58:	0028      	movs	r0, r5
     d5a:	692b      	ldr	r3, [r5, #16]
     d5c:	4798      	blx	r3
     d5e:	e007      	b.n	d70 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     d60:	0a1b      	lsrs	r3, r3, #8
     d62:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     d64:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     d66:	3301      	adds	r3, #1
     d68:	626b      	str	r3, [r5, #36]	; 0x24
     d6a:	e7e8      	b.n	d3e <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     d6c:	2304      	movs	r3, #4
     d6e:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     d70:	06f3      	lsls	r3, r6, #27
     d72:	d504      	bpl.n	d7e <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     d74:	2310      	movs	r3, #16
     d76:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     d78:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     d7a:	06fb      	lsls	r3, r7, #27
     d7c:	d40e      	bmi.n	d9c <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     d7e:	06b3      	lsls	r3, r6, #26
     d80:	d504      	bpl.n	d8c <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     d82:	2320      	movs	r3, #32
     d84:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     d86:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     d88:	073b      	lsls	r3, r7, #28
     d8a:	d40b      	bmi.n	da4 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     d8c:	0733      	lsls	r3, r6, #28
     d8e:	d504      	bpl.n	d9a <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     d90:	2308      	movs	r3, #8
     d92:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     d94:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     d96:	06bb      	lsls	r3, r7, #26
     d98:	d408      	bmi.n	dac <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     d9c:	0028      	movs	r0, r5
     d9e:	69eb      	ldr	r3, [r5, #28]
     da0:	4798      	blx	r3
     da2:	e7ec      	b.n	d7e <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     da4:	0028      	movs	r0, r5
     da6:	69ab      	ldr	r3, [r5, #24]
     da8:	4798      	blx	r3
     daa:	e7ef      	b.n	d8c <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     dac:	6a2b      	ldr	r3, [r5, #32]
     dae:	0028      	movs	r0, r5
     db0:	4798      	blx	r3
}
     db2:	e7f2      	b.n	d9a <_usart_interrupt_handler+0x176>
     db4:	200000e4 	.word	0x200000e4

00000db8 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     db8:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     dba:	0080      	lsls	r0, r0, #2
     dbc:	4b16      	ldr	r3, [pc, #88]	; (e18 <_tc_interrupt_handler+0x60>)
     dbe:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     dc0:	6823      	ldr	r3, [r4, #0]
     dc2:	7b9d      	ldrb	r5, [r3, #14]
     dc4:	7e22      	ldrb	r2, [r4, #24]
     dc6:	7e63      	ldrb	r3, [r4, #25]
     dc8:	4013      	ands	r3, r2
     dca:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     dcc:	07eb      	lsls	r3, r5, #31
     dce:	d406      	bmi.n	dde <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     dd0:	07ab      	lsls	r3, r5, #30
     dd2:	d40b      	bmi.n	dec <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     dd4:	06eb      	lsls	r3, r5, #27
     dd6:	d410      	bmi.n	dfa <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     dd8:	06ab      	lsls	r3, r5, #26
     dda:	d415      	bmi.n	e08 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     ddc:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     dde:	0020      	movs	r0, r4
     de0:	68a3      	ldr	r3, [r4, #8]
     de2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     de4:	2301      	movs	r3, #1
     de6:	6822      	ldr	r2, [r4, #0]
     de8:	7393      	strb	r3, [r2, #14]
     dea:	e7f1      	b.n	dd0 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     dec:	0020      	movs	r0, r4
     dee:	68e3      	ldr	r3, [r4, #12]
     df0:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     df2:	2302      	movs	r3, #2
     df4:	6822      	ldr	r2, [r4, #0]
     df6:	7393      	strb	r3, [r2, #14]
     df8:	e7ec      	b.n	dd4 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     dfa:	0020      	movs	r0, r4
     dfc:	6923      	ldr	r3, [r4, #16]
     dfe:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     e00:	2310      	movs	r3, #16
     e02:	6822      	ldr	r2, [r4, #0]
     e04:	7393      	strb	r3, [r2, #14]
     e06:	e7e7      	b.n	dd8 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     e08:	0020      	movs	r0, r4
     e0a:	6963      	ldr	r3, [r4, #20]
     e0c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     e0e:	6823      	ldr	r3, [r4, #0]
     e10:	2220      	movs	r2, #32
     e12:	739a      	strb	r2, [r3, #14]
}
     e14:	e7e2      	b.n	ddc <_tc_interrupt_handler+0x24>
     e16:	46c0      	nop			; (mov r8, r8)
     e18:	200000f0 	.word	0x200000f0

00000e1c <TC1_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     e1c:	b510      	push	{r4, lr}
     e1e:	2000      	movs	r0, #0
     e20:	4b01      	ldr	r3, [pc, #4]	; (e28 <TC1_Handler+0xc>)
     e22:	4798      	blx	r3
     e24:	bd10      	pop	{r4, pc}
     e26:	46c0      	nop			; (mov r8, r8)
     e28:	00000db9 	.word	0x00000db9

00000e2c <TC2_Handler>:
     e2c:	b510      	push	{r4, lr}
     e2e:	2001      	movs	r0, #1
     e30:	4b01      	ldr	r3, [pc, #4]	; (e38 <TC2_Handler+0xc>)
     e32:	4798      	blx	r3
     e34:	bd10      	pop	{r4, pc}
     e36:	46c0      	nop			; (mov r8, r8)
     e38:	00000db9 	.word	0x00000db9

00000e3c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     e3c:	4b0c      	ldr	r3, [pc, #48]	; (e70 <cpu_irq_enter_critical+0x34>)
     e3e:	681b      	ldr	r3, [r3, #0]
     e40:	2b00      	cmp	r3, #0
     e42:	d106      	bne.n	e52 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     e44:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     e48:	2b00      	cmp	r3, #0
     e4a:	d007      	beq.n	e5c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     e4c:	2200      	movs	r2, #0
     e4e:	4b09      	ldr	r3, [pc, #36]	; (e74 <cpu_irq_enter_critical+0x38>)
     e50:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     e52:	4a07      	ldr	r2, [pc, #28]	; (e70 <cpu_irq_enter_critical+0x34>)
     e54:	6813      	ldr	r3, [r2, #0]
     e56:	3301      	adds	r3, #1
     e58:	6013      	str	r3, [r2, #0]
}
     e5a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     e5c:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     e5e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     e62:	2200      	movs	r2, #0
     e64:	4b04      	ldr	r3, [pc, #16]	; (e78 <cpu_irq_enter_critical+0x3c>)
     e66:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     e68:	3201      	adds	r2, #1
     e6a:	4b02      	ldr	r3, [pc, #8]	; (e74 <cpu_irq_enter_critical+0x38>)
     e6c:	701a      	strb	r2, [r3, #0]
     e6e:	e7f0      	b.n	e52 <cpu_irq_enter_critical+0x16>
     e70:	200000a0 	.word	0x200000a0
     e74:	200000a4 	.word	0x200000a4
     e78:	20000008 	.word	0x20000008

00000e7c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     e7c:	4b08      	ldr	r3, [pc, #32]	; (ea0 <cpu_irq_leave_critical+0x24>)
     e7e:	681a      	ldr	r2, [r3, #0]
     e80:	3a01      	subs	r2, #1
     e82:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     e84:	681b      	ldr	r3, [r3, #0]
     e86:	2b00      	cmp	r3, #0
     e88:	d109      	bne.n	e9e <cpu_irq_leave_critical+0x22>
     e8a:	4b06      	ldr	r3, [pc, #24]	; (ea4 <cpu_irq_leave_critical+0x28>)
     e8c:	781b      	ldrb	r3, [r3, #0]
     e8e:	2b00      	cmp	r3, #0
     e90:	d005      	beq.n	e9e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     e92:	2201      	movs	r2, #1
     e94:	4b04      	ldr	r3, [pc, #16]	; (ea8 <cpu_irq_leave_critical+0x2c>)
     e96:	701a      	strb	r2, [r3, #0]
     e98:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     e9c:	b662      	cpsie	i
	}
}
     e9e:	4770      	bx	lr
     ea0:	200000a0 	.word	0x200000a0
     ea4:	200000a4 	.word	0x200000a4
     ea8:	20000008 	.word	0x20000008

00000eac <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     eac:	b5f0      	push	{r4, r5, r6, r7, lr}
     eae:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
     eb0:	ac01      	add	r4, sp, #4
     eb2:	2501      	movs	r5, #1
     eb4:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     eb6:	2700      	movs	r7, #0
     eb8:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     eba:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     ebc:	0021      	movs	r1, r4
     ebe:	2010      	movs	r0, #16
     ec0:	4e06      	ldr	r6, [pc, #24]	; (edc <system_board_init+0x30>)
     ec2:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
     ec4:	2280      	movs	r2, #128	; 0x80
     ec6:	0252      	lsls	r2, r2, #9
     ec8:	4b05      	ldr	r3, [pc, #20]	; (ee0 <system_board_init+0x34>)
     eca:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     ecc:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     ece:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     ed0:	0021      	movs	r1, r4
     ed2:	200e      	movs	r0, #14
     ed4:	47b0      	blx	r6
}
     ed6:	b003      	add	sp, #12
     ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     eda:	46c0      	nop			; (mov r8, r8)
     edc:	00000ee5 	.word	0x00000ee5
     ee0:	41004400 	.word	0x41004400

00000ee4 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     ee4:	b500      	push	{lr}
     ee6:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     ee8:	ab01      	add	r3, sp, #4
     eea:	2280      	movs	r2, #128	; 0x80
     eec:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     eee:	780a      	ldrb	r2, [r1, #0]
     ef0:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     ef2:	784a      	ldrb	r2, [r1, #1]
     ef4:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     ef6:	788a      	ldrb	r2, [r1, #2]
     ef8:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     efa:	0019      	movs	r1, r3
     efc:	4b01      	ldr	r3, [pc, #4]	; (f04 <port_pin_set_config+0x20>)
     efe:	4798      	blx	r3
}
     f00:	b003      	add	sp, #12
     f02:	bd00      	pop	{pc}
     f04:	00001601 	.word	0x00001601

00000f08 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     f08:	b510      	push	{r4, lr}
	switch (clock_source) {
     f0a:	2808      	cmp	r0, #8
     f0c:	d803      	bhi.n	f16 <system_clock_source_get_hz+0xe>
     f0e:	0080      	lsls	r0, r0, #2
     f10:	4b1c      	ldr	r3, [pc, #112]	; (f84 <system_clock_source_get_hz+0x7c>)
     f12:	581b      	ldr	r3, [r3, r0]
     f14:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     f16:	2000      	movs	r0, #0
     f18:	e032      	b.n	f80 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     f1a:	4b1b      	ldr	r3, [pc, #108]	; (f88 <system_clock_source_get_hz+0x80>)
     f1c:	6918      	ldr	r0, [r3, #16]
     f1e:	e02f      	b.n	f80 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     f20:	4b1a      	ldr	r3, [pc, #104]	; (f8c <system_clock_source_get_hz+0x84>)
     f22:	6a1b      	ldr	r3, [r3, #32]
     f24:	059b      	lsls	r3, r3, #22
     f26:	0f9b      	lsrs	r3, r3, #30
     f28:	4819      	ldr	r0, [pc, #100]	; (f90 <system_clock_source_get_hz+0x88>)
     f2a:	40d8      	lsrs	r0, r3
     f2c:	e028      	b.n	f80 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     f2e:	4b16      	ldr	r3, [pc, #88]	; (f88 <system_clock_source_get_hz+0x80>)
     f30:	6958      	ldr	r0, [r3, #20]
     f32:	e025      	b.n	f80 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     f34:	4b14      	ldr	r3, [pc, #80]	; (f88 <system_clock_source_get_hz+0x80>)
     f36:	681b      	ldr	r3, [r3, #0]
			return 0;
     f38:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     f3a:	079b      	lsls	r3, r3, #30
     f3c:	d520      	bpl.n	f80 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f3e:	4913      	ldr	r1, [pc, #76]	; (f8c <system_clock_source_get_hz+0x84>)
     f40:	2210      	movs	r2, #16
     f42:	68cb      	ldr	r3, [r1, #12]
     f44:	421a      	tst	r2, r3
     f46:	d0fc      	beq.n	f42 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     f48:	4b0f      	ldr	r3, [pc, #60]	; (f88 <system_clock_source_get_hz+0x80>)
     f4a:	681a      	ldr	r2, [r3, #0]
     f4c:	2324      	movs	r3, #36	; 0x24
     f4e:	4013      	ands	r3, r2
     f50:	2b04      	cmp	r3, #4
     f52:	d001      	beq.n	f58 <system_clock_source_get_hz+0x50>
			return 48000000UL;
     f54:	480f      	ldr	r0, [pc, #60]	; (f94 <system_clock_source_get_hz+0x8c>)
     f56:	e013      	b.n	f80 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     f58:	2000      	movs	r0, #0
     f5a:	4b0f      	ldr	r3, [pc, #60]	; (f98 <system_clock_source_get_hz+0x90>)
     f5c:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     f5e:	4b0a      	ldr	r3, [pc, #40]	; (f88 <system_clock_source_get_hz+0x80>)
     f60:	689b      	ldr	r3, [r3, #8]
     f62:	041b      	lsls	r3, r3, #16
     f64:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     f66:	4358      	muls	r0, r3
     f68:	e00a      	b.n	f80 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     f6a:	2350      	movs	r3, #80	; 0x50
     f6c:	4a07      	ldr	r2, [pc, #28]	; (f8c <system_clock_source_get_hz+0x84>)
     f6e:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     f70:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     f72:	075b      	lsls	r3, r3, #29
     f74:	d504      	bpl.n	f80 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     f76:	4b04      	ldr	r3, [pc, #16]	; (f88 <system_clock_source_get_hz+0x80>)
     f78:	68d8      	ldr	r0, [r3, #12]
     f7a:	e001      	b.n	f80 <system_clock_source_get_hz+0x78>
		return 32768UL;
     f7c:	2080      	movs	r0, #128	; 0x80
     f7e:	0200      	lsls	r0, r0, #8
	}
}
     f80:	bd10      	pop	{r4, pc}
     f82:	46c0      	nop			; (mov r8, r8)
     f84:	00001eb4 	.word	0x00001eb4
     f88:	200000a8 	.word	0x200000a8
     f8c:	40000800 	.word	0x40000800
     f90:	007a1200 	.word	0x007a1200
     f94:	02dc6c00 	.word	0x02dc6c00
     f98:	00001525 	.word	0x00001525

00000f9c <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     f9c:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     f9e:	490c      	ldr	r1, [pc, #48]	; (fd0 <system_clock_source_osc8m_set_config+0x34>)
     fa0:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     fa2:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     fa4:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     fa6:	7840      	ldrb	r0, [r0, #1]
     fa8:	2201      	movs	r2, #1
     faa:	4010      	ands	r0, r2
     fac:	0180      	lsls	r0, r0, #6
     fae:	2640      	movs	r6, #64	; 0x40
     fb0:	43b3      	bics	r3, r6
     fb2:	4303      	orrs	r3, r0
     fb4:	402a      	ands	r2, r5
     fb6:	01d2      	lsls	r2, r2, #7
     fb8:	2080      	movs	r0, #128	; 0x80
     fba:	4383      	bics	r3, r0
     fbc:	4313      	orrs	r3, r2
     fbe:	2203      	movs	r2, #3
     fc0:	4022      	ands	r2, r4
     fc2:	0212      	lsls	r2, r2, #8
     fc4:	4803      	ldr	r0, [pc, #12]	; (fd4 <system_clock_source_osc8m_set_config+0x38>)
     fc6:	4003      	ands	r3, r0
     fc8:	4313      	orrs	r3, r2
     fca:	620b      	str	r3, [r1, #32]
}
     fcc:	bd70      	pop	{r4, r5, r6, pc}
     fce:	46c0      	nop			; (mov r8, r8)
     fd0:	40000800 	.word	0x40000800
     fd4:	fffffcff 	.word	0xfffffcff

00000fd8 <system_clock_source_osc32k_set_config>:
 *
 * \param[in] config  OSC32K configuration structure containing the new config
 */
void system_clock_source_osc32k_set_config(
		struct system_clock_source_osc32k_config *const config)
{
     fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
     fda:	46ce      	mov	lr, r9
     fdc:	4647      	mov	r7, r8
     fde:	b580      	push	{r7, lr}
	SYSCTRL_OSC32K_Type temp = SYSCTRL->OSC32K;
     fe0:	4b19      	ldr	r3, [pc, #100]	; (1048 <system_clock_source_osc32k_set_config+0x70>)
     fe2:	4699      	mov	r9, r3
     fe4:	699b      	ldr	r3, [r3, #24]

	/* Update settings via a temporary struct to reduce register access */
	temp.bit.EN1K     = config->enable_1khz_output;
     fe6:	7841      	ldrb	r1, [r0, #1]
     fe8:	468c      	mov	ip, r1
	temp.bit.EN32K    = config->enable_32khz_output;
	temp.bit.STARTUP  = config->startup_time;
     fea:	7805      	ldrb	r5, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     fec:	7906      	ldrb	r6, [r0, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
     fee:	78c7      	ldrb	r7, [r0, #3]
	temp.bit.WRTLOCK  = config->write_once;
     ff0:	7944      	ldrb	r4, [r0, #5]

	SYSCTRL->OSC32K  = temp;
     ff2:	7880      	ldrb	r0, [r0, #2]
     ff4:	2101      	movs	r1, #1
     ff6:	4008      	ands	r0, r1
     ff8:	0080      	lsls	r0, r0, #2
     ffa:	2204      	movs	r2, #4
     ffc:	4393      	bics	r3, r2
     ffe:	4303      	orrs	r3, r0
    1000:	4660      	mov	r0, ip
    1002:	4008      	ands	r0, r1
    1004:	00c0      	lsls	r0, r0, #3
    1006:	3204      	adds	r2, #4
    1008:	4393      	bics	r3, r2
    100a:	4303      	orrs	r3, r0
    100c:	0038      	movs	r0, r7
    100e:	4008      	ands	r0, r1
    1010:	0180      	lsls	r0, r0, #6
    1012:	2740      	movs	r7, #64	; 0x40
    1014:	43bb      	bics	r3, r7
    1016:	4303      	orrs	r3, r0
    1018:	0030      	movs	r0, r6
    101a:	4008      	ands	r0, r1
    101c:	01c0      	lsls	r0, r0, #7
    101e:	2680      	movs	r6, #128	; 0x80
    1020:	43b3      	bics	r3, r6
    1022:	4303      	orrs	r3, r0
    1024:	2007      	movs	r0, #7
    1026:	4005      	ands	r5, r0
    1028:	022d      	lsls	r5, r5, #8
    102a:	4808      	ldr	r0, [pc, #32]	; (104c <system_clock_source_osc32k_set_config+0x74>)
    102c:	4003      	ands	r3, r0
    102e:	432b      	orrs	r3, r5
    1030:	4021      	ands	r1, r4
    1032:	0309      	lsls	r1, r1, #12
    1034:	4806      	ldr	r0, [pc, #24]	; (1050 <system_clock_source_osc32k_set_config+0x78>)
    1036:	4003      	ands	r3, r0
    1038:	430b      	orrs	r3, r1
    103a:	464a      	mov	r2, r9
    103c:	6193      	str	r3, [r2, #24]
}
    103e:	bc0c      	pop	{r2, r3}
    1040:	4690      	mov	r8, r2
    1042:	4699      	mov	r9, r3
    1044:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1046:	46c0      	nop			; (mov r8, r8)
    1048:	40000800 	.word	0x40000800
    104c:	fffff8ff 	.word	0xfffff8ff
    1050:	ffffefff 	.word	0xffffefff

00001054 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    1054:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1056:	7a03      	ldrb	r3, [r0, #8]
    1058:	069b      	lsls	r3, r3, #26
    105a:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    105c:	8942      	ldrh	r2, [r0, #10]
    105e:	0592      	lsls	r2, r2, #22
    1060:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    1062:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    1064:	4918      	ldr	r1, [pc, #96]	; (10c8 <system_clock_source_dfll_set_config+0x74>)
    1066:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    1068:	7983      	ldrb	r3, [r0, #6]
    106a:	79c2      	ldrb	r2, [r0, #7]
    106c:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    106e:	8842      	ldrh	r2, [r0, #2]
    1070:	8884      	ldrh	r4, [r0, #4]
    1072:	4322      	orrs	r2, r4
    1074:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    1076:	7842      	ldrb	r2, [r0, #1]
    1078:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    107a:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    107c:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    107e:	7803      	ldrb	r3, [r0, #0]
    1080:	2b04      	cmp	r3, #4
    1082:	d011      	beq.n	10a8 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    1084:	2b20      	cmp	r3, #32
    1086:	d10e      	bne.n	10a6 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1088:	7b03      	ldrb	r3, [r0, #12]
    108a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    108c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    108e:	4313      	orrs	r3, r2
    1090:	89c2      	ldrh	r2, [r0, #14]
    1092:	0412      	lsls	r2, r2, #16
    1094:	490d      	ldr	r1, [pc, #52]	; (10cc <system_clock_source_dfll_set_config+0x78>)
    1096:	400a      	ands	r2, r1
    1098:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    109a:	4a0b      	ldr	r2, [pc, #44]	; (10c8 <system_clock_source_dfll_set_config+0x74>)
    109c:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    109e:	6811      	ldr	r1, [r2, #0]
    10a0:	4b0b      	ldr	r3, [pc, #44]	; (10d0 <system_clock_source_dfll_set_config+0x7c>)
    10a2:	430b      	orrs	r3, r1
    10a4:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    10a6:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    10a8:	7b03      	ldrb	r3, [r0, #12]
    10aa:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    10ac:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    10ae:	4313      	orrs	r3, r2
    10b0:	89c2      	ldrh	r2, [r0, #14]
    10b2:	0412      	lsls	r2, r2, #16
    10b4:	4905      	ldr	r1, [pc, #20]	; (10cc <system_clock_source_dfll_set_config+0x78>)
    10b6:	400a      	ands	r2, r1
    10b8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    10ba:	4a03      	ldr	r2, [pc, #12]	; (10c8 <system_clock_source_dfll_set_config+0x74>)
    10bc:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    10be:	6813      	ldr	r3, [r2, #0]
    10c0:	2104      	movs	r1, #4
    10c2:	430b      	orrs	r3, r1
    10c4:	6013      	str	r3, [r2, #0]
    10c6:	e7ee      	b.n	10a6 <system_clock_source_dfll_set_config+0x52>
    10c8:	200000a8 	.word	0x200000a8
    10cc:	03ff0000 	.word	0x03ff0000
    10d0:	00000424 	.word	0x00000424

000010d4 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    10d4:	2808      	cmp	r0, #8
    10d6:	d803      	bhi.n	10e0 <system_clock_source_enable+0xc>
    10d8:	0080      	lsls	r0, r0, #2
    10da:	4b25      	ldr	r3, [pc, #148]	; (1170 <system_clock_source_enable+0x9c>)
    10dc:	581b      	ldr	r3, [r3, r0]
    10de:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    10e0:	2017      	movs	r0, #23
    10e2:	e044      	b.n	116e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    10e4:	4a23      	ldr	r2, [pc, #140]	; (1174 <system_clock_source_enable+0xa0>)
    10e6:	6a13      	ldr	r3, [r2, #32]
    10e8:	2102      	movs	r1, #2
    10ea:	430b      	orrs	r3, r1
    10ec:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    10ee:	2000      	movs	r0, #0
    10f0:	e03d      	b.n	116e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    10f2:	4a20      	ldr	r2, [pc, #128]	; (1174 <system_clock_source_enable+0xa0>)
    10f4:	6993      	ldr	r3, [r2, #24]
    10f6:	2102      	movs	r1, #2
    10f8:	430b      	orrs	r3, r1
    10fa:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    10fc:	2000      	movs	r0, #0
		break;
    10fe:	e036      	b.n	116e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1100:	4a1c      	ldr	r2, [pc, #112]	; (1174 <system_clock_source_enable+0xa0>)
    1102:	8a13      	ldrh	r3, [r2, #16]
    1104:	2102      	movs	r1, #2
    1106:	430b      	orrs	r3, r1
    1108:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    110a:	2000      	movs	r0, #0
		break;
    110c:	e02f      	b.n	116e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    110e:	4a19      	ldr	r2, [pc, #100]	; (1174 <system_clock_source_enable+0xa0>)
    1110:	8a93      	ldrh	r3, [r2, #20]
    1112:	2102      	movs	r1, #2
    1114:	430b      	orrs	r3, r1
    1116:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1118:	2000      	movs	r0, #0
		break;
    111a:	e028      	b.n	116e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    111c:	4916      	ldr	r1, [pc, #88]	; (1178 <system_clock_source_enable+0xa4>)
    111e:	680b      	ldr	r3, [r1, #0]
    1120:	2202      	movs	r2, #2
    1122:	4313      	orrs	r3, r2
    1124:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1126:	4b13      	ldr	r3, [pc, #76]	; (1174 <system_clock_source_enable+0xa0>)
    1128:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    112a:	0019      	movs	r1, r3
    112c:	320e      	adds	r2, #14
    112e:	68cb      	ldr	r3, [r1, #12]
    1130:	421a      	tst	r2, r3
    1132:	d0fc      	beq.n	112e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1134:	4a10      	ldr	r2, [pc, #64]	; (1178 <system_clock_source_enable+0xa4>)
    1136:	6891      	ldr	r1, [r2, #8]
    1138:	4b0e      	ldr	r3, [pc, #56]	; (1174 <system_clock_source_enable+0xa0>)
    113a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    113c:	6852      	ldr	r2, [r2, #4]
    113e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    1140:	2200      	movs	r2, #0
    1142:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1144:	0019      	movs	r1, r3
    1146:	3210      	adds	r2, #16
    1148:	68cb      	ldr	r3, [r1, #12]
    114a:	421a      	tst	r2, r3
    114c:	d0fc      	beq.n	1148 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    114e:	4b0a      	ldr	r3, [pc, #40]	; (1178 <system_clock_source_enable+0xa4>)
    1150:	681b      	ldr	r3, [r3, #0]
    1152:	b29b      	uxth	r3, r3
    1154:	4a07      	ldr	r2, [pc, #28]	; (1174 <system_clock_source_enable+0xa0>)
    1156:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    1158:	2000      	movs	r0, #0
    115a:	e008      	b.n	116e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    115c:	4905      	ldr	r1, [pc, #20]	; (1174 <system_clock_source_enable+0xa0>)
    115e:	2244      	movs	r2, #68	; 0x44
    1160:	5c8b      	ldrb	r3, [r1, r2]
    1162:	2002      	movs	r0, #2
    1164:	4303      	orrs	r3, r0
    1166:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    1168:	2000      	movs	r0, #0
		break;
    116a:	e000      	b.n	116e <system_clock_source_enable+0x9a>
		return STATUS_OK;
    116c:	2000      	movs	r0, #0
}
    116e:	4770      	bx	lr
    1170:	00001ed8 	.word	0x00001ed8
    1174:	40000800 	.word	0x40000800
    1178:	200000a8 	.word	0x200000a8

0000117c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    117c:	b5f0      	push	{r4, r5, r6, r7, lr}
    117e:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1180:	22c2      	movs	r2, #194	; 0xc2
    1182:	00d2      	lsls	r2, r2, #3
    1184:	4b44      	ldr	r3, [pc, #272]	; (1298 <system_clock_init+0x11c>)
    1186:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1188:	4944      	ldr	r1, [pc, #272]	; (129c <system_clock_init+0x120>)
    118a:	684b      	ldr	r3, [r1, #4]
    118c:	221e      	movs	r2, #30
    118e:	4393      	bics	r3, r2
    1190:	3a1c      	subs	r2, #28
    1192:	4313      	orrs	r3, r2
    1194:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    1196:	ab01      	add	r3, sp, #4
    1198:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    119a:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    119c:	4d40      	ldr	r5, [pc, #256]	; (12a0 <system_clock_init+0x124>)
    119e:	b2e0      	uxtb	r0, r4
    11a0:	a901      	add	r1, sp, #4
    11a2:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    11a4:	3401      	adds	r4, #1
    11a6:	2c18      	cmp	r4, #24
    11a8:	d1f9      	bne.n	119e <system_clock_init+0x22>


	/* OSCK32K */
#if CONF_CLOCK_OSC32K_ENABLE == true
	SYSCTRL->OSC32K.bit.CALIB =
			(*(uint32_t *)FUSES_OSC32K_ADDR >> FUSES_OSC32K_Pos);
    11aa:	4c3e      	ldr	r4, [pc, #248]	; (12a4 <system_clock_init+0x128>)
    11ac:	6823      	ldr	r3, [r4, #0]
    11ae:	04db      	lsls	r3, r3, #19
	SYSCTRL->OSC32K.bit.CALIB =
    11b0:	4939      	ldr	r1, [pc, #228]	; (1298 <system_clock_init+0x11c>)
    11b2:	698a      	ldr	r2, [r1, #24]
    11b4:	0e5b      	lsrs	r3, r3, #25
    11b6:	041b      	lsls	r3, r3, #16
    11b8:	483b      	ldr	r0, [pc, #236]	; (12a8 <system_clock_init+0x12c>)
    11ba:	4002      	ands	r2, r0
    11bc:	4313      	orrs	r3, r2
    11be:	618b      	str	r3, [r1, #24]
	config->enable_1khz_output  = true;
    11c0:	a80a      	add	r0, sp, #40	; 0x28
    11c2:	2301      	movs	r3, #1
    11c4:	7043      	strb	r3, [r0, #1]
	config->enable_32khz_output = true;
    11c6:	7083      	strb	r3, [r0, #2]
	config->run_in_standby      = false;
    11c8:	2500      	movs	r5, #0
    11ca:	70c5      	strb	r5, [r0, #3]
	config->on_demand           = true;
    11cc:	7103      	strb	r3, [r0, #4]
	config->startup_time        = SYSTEM_OSC32K_STARTUP_130;
    11ce:	3306      	adds	r3, #6
    11d0:	7003      	strb	r3, [r0, #0]
	config->write_once          = false;
    11d2:	7145      	strb	r5, [r0, #5]
	osc32k_conf.enable_1khz_output  = CONF_CLOCK_OSC32K_ENABLE_1KHZ_OUTPUT;
	osc32k_conf.enable_32khz_output = CONF_CLOCK_OSC32K_ENABLE_32KHZ_OUTPUT;
	osc32k_conf.on_demand           = CONF_CLOCK_OSC32K_ON_DEMAND;
	osc32k_conf.run_in_standby      = CONF_CLOCK_OSC32K_RUN_IN_STANDBY;

	system_clock_source_osc32k_set_config(&osc32k_conf);
    11d4:	4b35      	ldr	r3, [pc, #212]	; (12ac <system_clock_init+0x130>)
    11d6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC32K);
    11d8:	2004      	movs	r0, #4
    11da:	4b35      	ldr	r3, [pc, #212]	; (12b0 <system_clock_init+0x134>)
    11dc:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    11de:	ab05      	add	r3, sp, #20
    11e0:	2200      	movs	r2, #0
    11e2:	805d      	strh	r5, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    11e4:	809d      	strh	r5, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    11e6:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    11e8:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    11ea:	213f      	movs	r1, #63	; 0x3f
    11ec:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    11ee:	393b      	subs	r1, #59	; 0x3b
    11f0:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    11f2:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    11f4:	6823      	ldr	r3, [r4, #0]
    11f6:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    11f8:	2b3f      	cmp	r3, #63	; 0x3f
    11fa:	d04b      	beq.n	1294 <system_clock_init+0x118>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    11fc:	a805      	add	r0, sp, #20
    11fe:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1200:	23b7      	movs	r3, #183	; 0xb7
    1202:	00db      	lsls	r3, r3, #3
    1204:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1206:	2307      	movs	r3, #7
    1208:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    120a:	3338      	adds	r3, #56	; 0x38
    120c:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    120e:	4b29      	ldr	r3, [pc, #164]	; (12b4 <system_clock_init+0x138>)
    1210:	4798      	blx	r3
	config->run_in_standby  = false;
    1212:	a804      	add	r0, sp, #16
    1214:	2500      	movs	r5, #0
    1216:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1218:	2601      	movs	r6, #1
    121a:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    121c:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    121e:	4b26      	ldr	r3, [pc, #152]	; (12b8 <system_clock_init+0x13c>)
    1220:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1222:	2006      	movs	r0, #6
    1224:	4f22      	ldr	r7, [pc, #136]	; (12b0 <system_clock_init+0x134>)
    1226:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1228:	4b24      	ldr	r3, [pc, #144]	; (12bc <system_clock_init+0x140>)
    122a:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    122c:	ac01      	add	r4, sp, #4
    122e:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    1230:	7065      	strb	r5, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    1232:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    1234:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    1236:	2304      	movs	r3, #4
    1238:	7023      	strb	r3, [r4, #0]
    123a:	0021      	movs	r1, r4
    123c:	2001      	movs	r0, #1
    123e:	4b20      	ldr	r3, [pc, #128]	; (12c0 <system_clock_init+0x144>)
    1240:	4798      	blx	r3
    1242:	2001      	movs	r0, #1
    1244:	4b1f      	ldr	r3, [pc, #124]	; (12c4 <system_clock_init+0x148>)
    1246:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    1248:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    124a:	0021      	movs	r1, r4
    124c:	2000      	movs	r0, #0
    124e:	4b14      	ldr	r3, [pc, #80]	; (12a0 <system_clock_init+0x124>)
    1250:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    1252:	2000      	movs	r0, #0
    1254:	4b1c      	ldr	r3, [pc, #112]	; (12c8 <system_clock_init+0x14c>)
    1256:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    1258:	2007      	movs	r0, #7
    125a:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    125c:	490e      	ldr	r1, [pc, #56]	; (1298 <system_clock_init+0x11c>)
    125e:	22d0      	movs	r2, #208	; 0xd0
    1260:	68cb      	ldr	r3, [r1, #12]
    1262:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    1264:	2bd0      	cmp	r3, #208	; 0xd0
    1266:	d1fb      	bne.n	1260 <system_clock_init+0xe4>
	PM->CPUSEL.reg = (uint32_t)divider;
    1268:	4a18      	ldr	r2, [pc, #96]	; (12cc <system_clock_init+0x150>)
    126a:	2300      	movs	r3, #0
    126c:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    126e:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1270:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1272:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    1274:	a901      	add	r1, sp, #4
    1276:	2201      	movs	r2, #1
    1278:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    127a:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    127c:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    127e:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1280:	3307      	adds	r3, #7
    1282:	700b      	strb	r3, [r1, #0]
    1284:	2000      	movs	r0, #0
    1286:	4b0e      	ldr	r3, [pc, #56]	; (12c0 <system_clock_init+0x144>)
    1288:	4798      	blx	r3
    128a:	2000      	movs	r0, #0
    128c:	4b0d      	ldr	r3, [pc, #52]	; (12c4 <system_clock_init+0x148>)
    128e:	4798      	blx	r3
#endif
}
    1290:	b00d      	add	sp, #52	; 0x34
    1292:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1294:	3b20      	subs	r3, #32
    1296:	e7b1      	b.n	11fc <system_clock_init+0x80>
    1298:	40000800 	.word	0x40000800
    129c:	41004000 	.word	0x41004000
    12a0:	00001509 	.word	0x00001509
    12a4:	00806024 	.word	0x00806024
    12a8:	ff80ffff 	.word	0xff80ffff
    12ac:	00000fd9 	.word	0x00000fd9
    12b0:	000010d5 	.word	0x000010d5
    12b4:	00001055 	.word	0x00001055
    12b8:	00000f9d 	.word	0x00000f9d
    12bc:	000012d1 	.word	0x000012d1
    12c0:	000012f5 	.word	0x000012f5
    12c4:	000013ad 	.word	0x000013ad
    12c8:	0000147d 	.word	0x0000147d
    12cc:	40000400 	.word	0x40000400

000012d0 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    12d0:	4a06      	ldr	r2, [pc, #24]	; (12ec <system_gclk_init+0x1c>)
    12d2:	6993      	ldr	r3, [r2, #24]
    12d4:	2108      	movs	r1, #8
    12d6:	430b      	orrs	r3, r1
    12d8:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    12da:	2201      	movs	r2, #1
    12dc:	4b04      	ldr	r3, [pc, #16]	; (12f0 <system_gclk_init+0x20>)
    12de:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    12e0:	0019      	movs	r1, r3
    12e2:	780b      	ldrb	r3, [r1, #0]
    12e4:	4213      	tst	r3, r2
    12e6:	d1fc      	bne.n	12e2 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    12e8:	4770      	bx	lr
    12ea:	46c0      	nop			; (mov r8, r8)
    12ec:	40000400 	.word	0x40000400
    12f0:	40000c00 	.word	0x40000c00

000012f4 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    12f4:	b570      	push	{r4, r5, r6, lr}
    12f6:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    12f8:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    12fa:	780d      	ldrb	r5, [r1, #0]
    12fc:	022d      	lsls	r5, r5, #8
    12fe:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1300:	784b      	ldrb	r3, [r1, #1]
    1302:	2b00      	cmp	r3, #0
    1304:	d002      	beq.n	130c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1306:	2380      	movs	r3, #128	; 0x80
    1308:	02db      	lsls	r3, r3, #11
    130a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    130c:	7a4b      	ldrb	r3, [r1, #9]
    130e:	2b00      	cmp	r3, #0
    1310:	d002      	beq.n	1318 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1312:	2380      	movs	r3, #128	; 0x80
    1314:	031b      	lsls	r3, r3, #12
    1316:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1318:	6848      	ldr	r0, [r1, #4]
    131a:	2801      	cmp	r0, #1
    131c:	d910      	bls.n	1340 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    131e:	1e43      	subs	r3, r0, #1
    1320:	4218      	tst	r0, r3
    1322:	d134      	bne.n	138e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1324:	2802      	cmp	r0, #2
    1326:	d930      	bls.n	138a <system_gclk_gen_set_config+0x96>
    1328:	2302      	movs	r3, #2
    132a:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    132c:	3201      	adds	r2, #1
						mask <<= 1) {
    132e:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1330:	4298      	cmp	r0, r3
    1332:	d8fb      	bhi.n	132c <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1334:	0212      	lsls	r2, r2, #8
    1336:	4332      	orrs	r2, r6
    1338:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    133a:	2380      	movs	r3, #128	; 0x80
    133c:	035b      	lsls	r3, r3, #13
    133e:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1340:	7a0b      	ldrb	r3, [r1, #8]
    1342:	2b00      	cmp	r3, #0
    1344:	d002      	beq.n	134c <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    1346:	2380      	movs	r3, #128	; 0x80
    1348:	039b      	lsls	r3, r3, #14
    134a:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    134c:	4a13      	ldr	r2, [pc, #76]	; (139c <system_gclk_gen_set_config+0xa8>)
    134e:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1350:	b25b      	sxtb	r3, r3
    1352:	2b00      	cmp	r3, #0
    1354:	dbfb      	blt.n	134e <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
    1356:	4b12      	ldr	r3, [pc, #72]	; (13a0 <system_gclk_gen_set_config+0xac>)
    1358:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    135a:	4b12      	ldr	r3, [pc, #72]	; (13a4 <system_gclk_gen_set_config+0xb0>)
    135c:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    135e:	4a0f      	ldr	r2, [pc, #60]	; (139c <system_gclk_gen_set_config+0xa8>)
    1360:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1362:	b25b      	sxtb	r3, r3
    1364:	2b00      	cmp	r3, #0
    1366:	dbfb      	blt.n	1360 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1368:	4b0c      	ldr	r3, [pc, #48]	; (139c <system_gclk_gen_set_config+0xa8>)
    136a:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    136c:	001a      	movs	r2, r3
    136e:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1370:	b25b      	sxtb	r3, r3
    1372:	2b00      	cmp	r3, #0
    1374:	dbfb      	blt.n	136e <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1376:	4a09      	ldr	r2, [pc, #36]	; (139c <system_gclk_gen_set_config+0xa8>)
    1378:	6853      	ldr	r3, [r2, #4]
    137a:	2180      	movs	r1, #128	; 0x80
    137c:	0249      	lsls	r1, r1, #9
    137e:	400b      	ands	r3, r1
    1380:	431d      	orrs	r5, r3
    1382:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
    1384:	4b08      	ldr	r3, [pc, #32]	; (13a8 <system_gclk_gen_set_config+0xb4>)
    1386:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1388:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    138a:	2200      	movs	r2, #0
    138c:	e7d2      	b.n	1334 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    138e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1390:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1392:	2380      	movs	r3, #128	; 0x80
    1394:	029b      	lsls	r3, r3, #10
    1396:	431d      	orrs	r5, r3
    1398:	e7d2      	b.n	1340 <system_gclk_gen_set_config+0x4c>
    139a:	46c0      	nop			; (mov r8, r8)
    139c:	40000c00 	.word	0x40000c00
    13a0:	00000e3d 	.word	0x00000e3d
    13a4:	40000c08 	.word	0x40000c08
    13a8:	00000e7d 	.word	0x00000e7d

000013ac <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    13ac:	b510      	push	{r4, lr}
    13ae:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13b0:	4a0b      	ldr	r2, [pc, #44]	; (13e0 <system_gclk_gen_enable+0x34>)
    13b2:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    13b4:	b25b      	sxtb	r3, r3
    13b6:	2b00      	cmp	r3, #0
    13b8:	dbfb      	blt.n	13b2 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    13ba:	4b0a      	ldr	r3, [pc, #40]	; (13e4 <system_gclk_gen_enable+0x38>)
    13bc:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    13be:	4b0a      	ldr	r3, [pc, #40]	; (13e8 <system_gclk_gen_enable+0x3c>)
    13c0:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13c2:	4a07      	ldr	r2, [pc, #28]	; (13e0 <system_gclk_gen_enable+0x34>)
    13c4:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    13c6:	b25b      	sxtb	r3, r3
    13c8:	2b00      	cmp	r3, #0
    13ca:	dbfb      	blt.n	13c4 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    13cc:	4a04      	ldr	r2, [pc, #16]	; (13e0 <system_gclk_gen_enable+0x34>)
    13ce:	6851      	ldr	r1, [r2, #4]
    13d0:	2380      	movs	r3, #128	; 0x80
    13d2:	025b      	lsls	r3, r3, #9
    13d4:	430b      	orrs	r3, r1
    13d6:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    13d8:	4b04      	ldr	r3, [pc, #16]	; (13ec <system_gclk_gen_enable+0x40>)
    13da:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    13dc:	bd10      	pop	{r4, pc}
    13de:	46c0      	nop			; (mov r8, r8)
    13e0:	40000c00 	.word	0x40000c00
    13e4:	00000e3d 	.word	0x00000e3d
    13e8:	40000c04 	.word	0x40000c04
    13ec:	00000e7d 	.word	0x00000e7d

000013f0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    13f0:	b570      	push	{r4, r5, r6, lr}
    13f2:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13f4:	4a1a      	ldr	r2, [pc, #104]	; (1460 <system_gclk_gen_get_hz+0x70>)
    13f6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    13f8:	b25b      	sxtb	r3, r3
    13fa:	2b00      	cmp	r3, #0
    13fc:	dbfb      	blt.n	13f6 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    13fe:	4b19      	ldr	r3, [pc, #100]	; (1464 <system_gclk_gen_get_hz+0x74>)
    1400:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1402:	4b19      	ldr	r3, [pc, #100]	; (1468 <system_gclk_gen_get_hz+0x78>)
    1404:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1406:	4a16      	ldr	r2, [pc, #88]	; (1460 <system_gclk_gen_get_hz+0x70>)
    1408:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    140a:	b25b      	sxtb	r3, r3
    140c:	2b00      	cmp	r3, #0
    140e:	dbfb      	blt.n	1408 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1410:	4e13      	ldr	r6, [pc, #76]	; (1460 <system_gclk_gen_get_hz+0x70>)
    1412:	6870      	ldr	r0, [r6, #4]
    1414:	04c0      	lsls	r0, r0, #19
    1416:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1418:	4b14      	ldr	r3, [pc, #80]	; (146c <system_gclk_gen_get_hz+0x7c>)
    141a:	4798      	blx	r3
    141c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    141e:	4b12      	ldr	r3, [pc, #72]	; (1468 <system_gclk_gen_get_hz+0x78>)
    1420:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1422:	6876      	ldr	r6, [r6, #4]
    1424:	02f6      	lsls	r6, r6, #11
    1426:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1428:	4b11      	ldr	r3, [pc, #68]	; (1470 <system_gclk_gen_get_hz+0x80>)
    142a:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    142c:	4a0c      	ldr	r2, [pc, #48]	; (1460 <system_gclk_gen_get_hz+0x70>)
    142e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1430:	b25b      	sxtb	r3, r3
    1432:	2b00      	cmp	r3, #0
    1434:	dbfb      	blt.n	142e <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    1436:	4b0a      	ldr	r3, [pc, #40]	; (1460 <system_gclk_gen_get_hz+0x70>)
    1438:	689c      	ldr	r4, [r3, #8]
    143a:	0224      	lsls	r4, r4, #8
    143c:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    143e:	4b0d      	ldr	r3, [pc, #52]	; (1474 <system_gclk_gen_get_hz+0x84>)
    1440:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1442:	2e00      	cmp	r6, #0
    1444:	d107      	bne.n	1456 <system_gclk_gen_get_hz+0x66>
    1446:	2c01      	cmp	r4, #1
    1448:	d907      	bls.n	145a <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    144a:	0021      	movs	r1, r4
    144c:	0028      	movs	r0, r5
    144e:	4b0a      	ldr	r3, [pc, #40]	; (1478 <system_gclk_gen_get_hz+0x88>)
    1450:	4798      	blx	r3
    1452:	0005      	movs	r5, r0
    1454:	e001      	b.n	145a <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    1456:	3401      	adds	r4, #1
    1458:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    145a:	0028      	movs	r0, r5
    145c:	bd70      	pop	{r4, r5, r6, pc}
    145e:	46c0      	nop			; (mov r8, r8)
    1460:	40000c00 	.word	0x40000c00
    1464:	00000e3d 	.word	0x00000e3d
    1468:	40000c04 	.word	0x40000c04
    146c:	00000f09 	.word	0x00000f09
    1470:	40000c08 	.word	0x40000c08
    1474:	00000e7d 	.word	0x00000e7d
    1478:	00001a19 	.word	0x00001a19

0000147c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    147c:	b510      	push	{r4, lr}
    147e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1480:	4b06      	ldr	r3, [pc, #24]	; (149c <system_gclk_chan_enable+0x20>)
    1482:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1484:	4b06      	ldr	r3, [pc, #24]	; (14a0 <system_gclk_chan_enable+0x24>)
    1486:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1488:	4a06      	ldr	r2, [pc, #24]	; (14a4 <system_gclk_chan_enable+0x28>)
    148a:	8853      	ldrh	r3, [r2, #2]
    148c:	2180      	movs	r1, #128	; 0x80
    148e:	01c9      	lsls	r1, r1, #7
    1490:	430b      	orrs	r3, r1
    1492:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1494:	4b04      	ldr	r3, [pc, #16]	; (14a8 <system_gclk_chan_enable+0x2c>)
    1496:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1498:	bd10      	pop	{r4, pc}
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	00000e3d 	.word	0x00000e3d
    14a0:	40000c02 	.word	0x40000c02
    14a4:	40000c00 	.word	0x40000c00
    14a8:	00000e7d 	.word	0x00000e7d

000014ac <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    14ac:	b510      	push	{r4, lr}
    14ae:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    14b0:	4b0f      	ldr	r3, [pc, #60]	; (14f0 <system_gclk_chan_disable+0x44>)
    14b2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    14b4:	4b0f      	ldr	r3, [pc, #60]	; (14f4 <system_gclk_chan_disable+0x48>)
    14b6:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    14b8:	4a0f      	ldr	r2, [pc, #60]	; (14f8 <system_gclk_chan_disable+0x4c>)
    14ba:	8853      	ldrh	r3, [r2, #2]
    14bc:	051b      	lsls	r3, r3, #20
    14be:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    14c0:	8853      	ldrh	r3, [r2, #2]
    14c2:	490e      	ldr	r1, [pc, #56]	; (14fc <system_gclk_chan_disable+0x50>)
    14c4:	400b      	ands	r3, r1
    14c6:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    14c8:	8853      	ldrh	r3, [r2, #2]
    14ca:	490d      	ldr	r1, [pc, #52]	; (1500 <system_gclk_chan_disable+0x54>)
    14cc:	400b      	ands	r3, r1
    14ce:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    14d0:	0011      	movs	r1, r2
    14d2:	2280      	movs	r2, #128	; 0x80
    14d4:	01d2      	lsls	r2, r2, #7
    14d6:	884b      	ldrh	r3, [r1, #2]
    14d8:	4213      	tst	r3, r2
    14da:	d1fc      	bne.n	14d6 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    14dc:	4906      	ldr	r1, [pc, #24]	; (14f8 <system_gclk_chan_disable+0x4c>)
    14de:	884a      	ldrh	r2, [r1, #2]
    14e0:	0203      	lsls	r3, r0, #8
    14e2:	4806      	ldr	r0, [pc, #24]	; (14fc <system_gclk_chan_disable+0x50>)
    14e4:	4002      	ands	r2, r0
    14e6:	4313      	orrs	r3, r2
    14e8:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    14ea:	4b06      	ldr	r3, [pc, #24]	; (1504 <system_gclk_chan_disable+0x58>)
    14ec:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    14ee:	bd10      	pop	{r4, pc}
    14f0:	00000e3d 	.word	0x00000e3d
    14f4:	40000c02 	.word	0x40000c02
    14f8:	40000c00 	.word	0x40000c00
    14fc:	fffff0ff 	.word	0xfffff0ff
    1500:	ffffbfff 	.word	0xffffbfff
    1504:	00000e7d 	.word	0x00000e7d

00001508 <system_gclk_chan_set_config>:
{
    1508:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    150a:	780c      	ldrb	r4, [r1, #0]
    150c:	0224      	lsls	r4, r4, #8
    150e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1510:	4b02      	ldr	r3, [pc, #8]	; (151c <system_gclk_chan_set_config+0x14>)
    1512:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1514:	b2a4      	uxth	r4, r4
    1516:	4b02      	ldr	r3, [pc, #8]	; (1520 <system_gclk_chan_set_config+0x18>)
    1518:	805c      	strh	r4, [r3, #2]
}
    151a:	bd10      	pop	{r4, pc}
    151c:	000014ad 	.word	0x000014ad
    1520:	40000c00 	.word	0x40000c00

00001524 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1524:	b510      	push	{r4, lr}
    1526:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1528:	4b06      	ldr	r3, [pc, #24]	; (1544 <system_gclk_chan_get_hz+0x20>)
    152a:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    152c:	4b06      	ldr	r3, [pc, #24]	; (1548 <system_gclk_chan_get_hz+0x24>)
    152e:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1530:	4b06      	ldr	r3, [pc, #24]	; (154c <system_gclk_chan_get_hz+0x28>)
    1532:	885c      	ldrh	r4, [r3, #2]
    1534:	0524      	lsls	r4, r4, #20
    1536:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1538:	4b05      	ldr	r3, [pc, #20]	; (1550 <system_gclk_chan_get_hz+0x2c>)
    153a:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    153c:	0020      	movs	r0, r4
    153e:	4b05      	ldr	r3, [pc, #20]	; (1554 <system_gclk_chan_get_hz+0x30>)
    1540:	4798      	blx	r3
}
    1542:	bd10      	pop	{r4, pc}
    1544:	00000e3d 	.word	0x00000e3d
    1548:	40000c02 	.word	0x40000c02
    154c:	40000c00 	.word	0x40000c00
    1550:	00000e7d 	.word	0x00000e7d
    1554:	000013f1 	.word	0x000013f1

00001558 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1558:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    155a:	78d3      	ldrb	r3, [r2, #3]
    155c:	2b00      	cmp	r3, #0
    155e:	d135      	bne.n	15cc <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1560:	7813      	ldrb	r3, [r2, #0]
    1562:	2b80      	cmp	r3, #128	; 0x80
    1564:	d029      	beq.n	15ba <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    1566:	061b      	lsls	r3, r3, #24
    1568:	2480      	movs	r4, #128	; 0x80
    156a:	0264      	lsls	r4, r4, #9
    156c:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    156e:	7854      	ldrb	r4, [r2, #1]
    1570:	2502      	movs	r5, #2
    1572:	43ac      	bics	r4, r5
    1574:	d106      	bne.n	1584 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1576:	7894      	ldrb	r4, [r2, #2]
    1578:	2c00      	cmp	r4, #0
    157a:	d120      	bne.n	15be <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    157c:	2480      	movs	r4, #128	; 0x80
    157e:	02a4      	lsls	r4, r4, #10
    1580:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1582:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1584:	7854      	ldrb	r4, [r2, #1]
    1586:	3c01      	subs	r4, #1
    1588:	2c01      	cmp	r4, #1
    158a:	d91c      	bls.n	15c6 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    158c:	040d      	lsls	r5, r1, #16
    158e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1590:	24a0      	movs	r4, #160	; 0xa0
    1592:	05e4      	lsls	r4, r4, #23
    1594:	432c      	orrs	r4, r5
    1596:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1598:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    159a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    159c:	24d0      	movs	r4, #208	; 0xd0
    159e:	0624      	lsls	r4, r4, #24
    15a0:	432c      	orrs	r4, r5
    15a2:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15a4:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    15a6:	78d4      	ldrb	r4, [r2, #3]
    15a8:	2c00      	cmp	r4, #0
    15aa:	d122      	bne.n	15f2 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    15ac:	035b      	lsls	r3, r3, #13
    15ae:	d51c      	bpl.n	15ea <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    15b0:	7893      	ldrb	r3, [r2, #2]
    15b2:	2b01      	cmp	r3, #1
    15b4:	d01e      	beq.n	15f4 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    15b6:	6141      	str	r1, [r0, #20]
    15b8:	e017      	b.n	15ea <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    15ba:	2300      	movs	r3, #0
    15bc:	e7d7      	b.n	156e <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    15be:	24c0      	movs	r4, #192	; 0xc0
    15c0:	02e4      	lsls	r4, r4, #11
    15c2:	4323      	orrs	r3, r4
    15c4:	e7dd      	b.n	1582 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    15c6:	4c0d      	ldr	r4, [pc, #52]	; (15fc <_system_pinmux_config+0xa4>)
    15c8:	4023      	ands	r3, r4
    15ca:	e7df      	b.n	158c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    15cc:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    15ce:	040c      	lsls	r4, r1, #16
    15d0:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    15d2:	23a0      	movs	r3, #160	; 0xa0
    15d4:	05db      	lsls	r3, r3, #23
    15d6:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15d8:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    15da:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    15dc:	23d0      	movs	r3, #208	; 0xd0
    15de:	061b      	lsls	r3, r3, #24
    15e0:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15e2:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    15e4:	78d3      	ldrb	r3, [r2, #3]
    15e6:	2b00      	cmp	r3, #0
    15e8:	d103      	bne.n	15f2 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    15ea:	7853      	ldrb	r3, [r2, #1]
    15ec:	3b01      	subs	r3, #1
    15ee:	2b01      	cmp	r3, #1
    15f0:	d902      	bls.n	15f8 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    15f2:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    15f4:	6181      	str	r1, [r0, #24]
    15f6:	e7f8      	b.n	15ea <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    15f8:	6081      	str	r1, [r0, #8]
}
    15fa:	e7fa      	b.n	15f2 <_system_pinmux_config+0x9a>
    15fc:	fffbffff 	.word	0xfffbffff

00001600 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1600:	b510      	push	{r4, lr}
    1602:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    1604:	09c1      	lsrs	r1, r0, #7
		return NULL;
    1606:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1608:	2900      	cmp	r1, #0
    160a:	d104      	bne.n	1616 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    160c:	0943      	lsrs	r3, r0, #5
    160e:	01db      	lsls	r3, r3, #7
    1610:	4905      	ldr	r1, [pc, #20]	; (1628 <system_pinmux_pin_set_config+0x28>)
    1612:	468c      	mov	ip, r1
    1614:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1616:	241f      	movs	r4, #31
    1618:	4020      	ands	r0, r4
    161a:	2101      	movs	r1, #1
    161c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    161e:	0018      	movs	r0, r3
    1620:	4b02      	ldr	r3, [pc, #8]	; (162c <system_pinmux_pin_set_config+0x2c>)
    1622:	4798      	blx	r3
}
    1624:	bd10      	pop	{r4, pc}
    1626:	46c0      	nop			; (mov r8, r8)
    1628:	41004400 	.word	0x41004400
    162c:	00001559 	.word	0x00001559

00001630 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1630:	4770      	bx	lr
	...

00001634 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1634:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    1636:	4b05      	ldr	r3, [pc, #20]	; (164c <system_init+0x18>)
    1638:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    163a:	4b05      	ldr	r3, [pc, #20]	; (1650 <system_init+0x1c>)
    163c:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    163e:	4b05      	ldr	r3, [pc, #20]	; (1654 <system_init+0x20>)
    1640:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1642:	4b05      	ldr	r3, [pc, #20]	; (1658 <system_init+0x24>)
    1644:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    1646:	4b05      	ldr	r3, [pc, #20]	; (165c <system_init+0x28>)
    1648:	4798      	blx	r3
}
    164a:	bd10      	pop	{r4, pc}
    164c:	0000117d 	.word	0x0000117d
    1650:	00000ead 	.word	0x00000ead
    1654:	00001631 	.word	0x00001631
    1658:	00001631 	.word	0x00001631
    165c:	00001631 	.word	0x00001631

00001660 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1660:	e7fe      	b.n	1660 <Dummy_Handler>
	...

00001664 <Reset_Handler>:
{
    1664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    1666:	4a2a      	ldr	r2, [pc, #168]	; (1710 <Reset_Handler+0xac>)
    1668:	4b2a      	ldr	r3, [pc, #168]	; (1714 <Reset_Handler+0xb0>)
    166a:	429a      	cmp	r2, r3
    166c:	d011      	beq.n	1692 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    166e:	001a      	movs	r2, r3
    1670:	4b29      	ldr	r3, [pc, #164]	; (1718 <Reset_Handler+0xb4>)
    1672:	429a      	cmp	r2, r3
    1674:	d20d      	bcs.n	1692 <Reset_Handler+0x2e>
    1676:	4a29      	ldr	r2, [pc, #164]	; (171c <Reset_Handler+0xb8>)
    1678:	3303      	adds	r3, #3
    167a:	1a9b      	subs	r3, r3, r2
    167c:	089b      	lsrs	r3, r3, #2
    167e:	3301      	adds	r3, #1
    1680:	009b      	lsls	r3, r3, #2
    1682:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1684:	4823      	ldr	r0, [pc, #140]	; (1714 <Reset_Handler+0xb0>)
    1686:	4922      	ldr	r1, [pc, #136]	; (1710 <Reset_Handler+0xac>)
    1688:	588c      	ldr	r4, [r1, r2]
    168a:	5084      	str	r4, [r0, r2]
    168c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    168e:	429a      	cmp	r2, r3
    1690:	d1fa      	bne.n	1688 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1692:	4a23      	ldr	r2, [pc, #140]	; (1720 <Reset_Handler+0xbc>)
    1694:	4b23      	ldr	r3, [pc, #140]	; (1724 <Reset_Handler+0xc0>)
    1696:	429a      	cmp	r2, r3
    1698:	d20a      	bcs.n	16b0 <Reset_Handler+0x4c>
    169a:	43d3      	mvns	r3, r2
    169c:	4921      	ldr	r1, [pc, #132]	; (1724 <Reset_Handler+0xc0>)
    169e:	185b      	adds	r3, r3, r1
    16a0:	2103      	movs	r1, #3
    16a2:	438b      	bics	r3, r1
    16a4:	3304      	adds	r3, #4
    16a6:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    16a8:	2100      	movs	r1, #0
    16aa:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    16ac:	4293      	cmp	r3, r2
    16ae:	d1fc      	bne.n	16aa <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    16b0:	4a1d      	ldr	r2, [pc, #116]	; (1728 <Reset_Handler+0xc4>)
    16b2:	21ff      	movs	r1, #255	; 0xff
    16b4:	4b1d      	ldr	r3, [pc, #116]	; (172c <Reset_Handler+0xc8>)
    16b6:	438b      	bics	r3, r1
    16b8:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    16ba:	39fd      	subs	r1, #253	; 0xfd
    16bc:	2390      	movs	r3, #144	; 0x90
    16be:	005b      	lsls	r3, r3, #1
    16c0:	4a1b      	ldr	r2, [pc, #108]	; (1730 <Reset_Handler+0xcc>)
    16c2:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    16c4:	4a1b      	ldr	r2, [pc, #108]	; (1734 <Reset_Handler+0xd0>)
    16c6:	78d3      	ldrb	r3, [r2, #3]
    16c8:	2503      	movs	r5, #3
    16ca:	43ab      	bics	r3, r5
    16cc:	2402      	movs	r4, #2
    16ce:	4323      	orrs	r3, r4
    16d0:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    16d2:	78d3      	ldrb	r3, [r2, #3]
    16d4:	270c      	movs	r7, #12
    16d6:	43bb      	bics	r3, r7
    16d8:	2608      	movs	r6, #8
    16da:	4333      	orrs	r3, r6
    16dc:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    16de:	4b16      	ldr	r3, [pc, #88]	; (1738 <Reset_Handler+0xd4>)
    16e0:	7b98      	ldrb	r0, [r3, #14]
    16e2:	2230      	movs	r2, #48	; 0x30
    16e4:	4390      	bics	r0, r2
    16e6:	2220      	movs	r2, #32
    16e8:	4310      	orrs	r0, r2
    16ea:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    16ec:	7b99      	ldrb	r1, [r3, #14]
    16ee:	43b9      	bics	r1, r7
    16f0:	4331      	orrs	r1, r6
    16f2:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    16f4:	7b9a      	ldrb	r2, [r3, #14]
    16f6:	43aa      	bics	r2, r5
    16f8:	4322      	orrs	r2, r4
    16fa:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    16fc:	4a0f      	ldr	r2, [pc, #60]	; (173c <Reset_Handler+0xd8>)
    16fe:	6853      	ldr	r3, [r2, #4]
    1700:	2180      	movs	r1, #128	; 0x80
    1702:	430b      	orrs	r3, r1
    1704:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1706:	4b0e      	ldr	r3, [pc, #56]	; (1740 <Reset_Handler+0xdc>)
    1708:	4798      	blx	r3
        main();
    170a:	4b0e      	ldr	r3, [pc, #56]	; (1744 <Reset_Handler+0xe0>)
    170c:	4798      	blx	r3
    170e:	e7fe      	b.n	170e <Reset_Handler+0xaa>
    1710:	00001f1c 	.word	0x00001f1c
    1714:	20000000 	.word	0x20000000
    1718:	20000074 	.word	0x20000074
    171c:	20000004 	.word	0x20000004
    1720:	20000074 	.word	0x20000074
    1724:	2000013c 	.word	0x2000013c
    1728:	e000ed00 	.word	0xe000ed00
    172c:	00000000 	.word	0x00000000
    1730:	41007000 	.word	0x41007000
    1734:	41005000 	.word	0x41005000
    1738:	41004800 	.word	0x41004800
    173c:	41004000 	.word	0x41004000
    1740:	00001d59 	.word	0x00001d59
    1744:	00001935 	.word	0x00001935

00001748 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    1748:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    174a:	4a06      	ldr	r2, [pc, #24]	; (1764 <_sbrk+0x1c>)
    174c:	6812      	ldr	r2, [r2, #0]
    174e:	2a00      	cmp	r2, #0
    1750:	d004      	beq.n	175c <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1752:	4a04      	ldr	r2, [pc, #16]	; (1764 <_sbrk+0x1c>)
    1754:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    1756:	18c3      	adds	r3, r0, r3
    1758:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    175a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    175c:	4902      	ldr	r1, [pc, #8]	; (1768 <_sbrk+0x20>)
    175e:	4a01      	ldr	r2, [pc, #4]	; (1764 <_sbrk+0x1c>)
    1760:	6011      	str	r1, [r2, #0]
    1762:	e7f6      	b.n	1752 <_sbrk+0xa>
    1764:	200000c0 	.word	0x200000c0
    1768:	20000540 	.word	0x20000540

0000176c <usart_write_callback>:

void usart_write_callback(struct usart_module *const usart_module)
{
	//port_pin_set_output_level(LED_0_PIN, 0);
	//port_pin_toggle_output_level(LED_0_PIN);
}
    176c:	4770      	bx	lr

0000176e <checkSum>:
	for (uint8_t i = 0; i < len; i++)
    176e:	2900      	cmp	r1, #0
    1770:	d00b      	beq.n	178a <checkSum+0x1c>
    1772:	0003      	movs	r3, r0
    1774:	3901      	subs	r1, #1
    1776:	b2c9      	uxtb	r1, r1
    1778:	3101      	adds	r1, #1
    177a:	1841      	adds	r1, r0, r1
    177c:	2000      	movs	r0, #0
	sum ^= data[i];
    177e:	781a      	ldrb	r2, [r3, #0]
    1780:	4050      	eors	r0, r2
    1782:	3301      	adds	r3, #1
	for (uint8_t i = 0; i < len; i++)
    1784:	428b      	cmp	r3, r1
    1786:	d1fa      	bne.n	177e <checkSum+0x10>
}
    1788:	4770      	bx	lr
	uint16_t sum = 0x00;
    178a:	2000      	movs	r0, #0
    178c:	e7fc      	b.n	1788 <checkSum+0x1a>
	...

00001790 <usart_read_callback>:
{
    1790:	b510      	push	{r4, lr}
	rx_buffer[rxBufferIndex] = rx_data;
    1792:	4b17      	ldr	r3, [pc, #92]	; (17f0 <usart_read_callback+0x60>)
    1794:	781b      	ldrb	r3, [r3, #0]
    1796:	4917      	ldr	r1, [pc, #92]	; (17f4 <usart_read_callback+0x64>)
    1798:	780a      	ldrb	r2, [r1, #0]
    179a:	b2d2      	uxtb	r2, r2
    179c:	4816      	ldr	r0, [pc, #88]	; (17f8 <usart_read_callback+0x68>)
    179e:	54c2      	strb	r2, [r0, r3]
	if(rx_data == 255 && ((rxBufferIndex+1) >= rx_buffer[msgLength]) && ledsUpdateOk){
    17a0:	780a      	ldrb	r2, [r1, #0]
    17a2:	b2d2      	uxtb	r2, r2
    17a4:	2aff      	cmp	r2, #255	; 0xff
    17a6:	d003      	beq.n	17b0 <usart_read_callback+0x20>
		rxBufferIndex++;
    17a8:	3301      	adds	r3, #1
    17aa:	4a11      	ldr	r2, [pc, #68]	; (17f0 <usart_read_callback+0x60>)
    17ac:	7013      	strb	r3, [r2, #0]
}
    17ae:	bd10      	pop	{r4, pc}
	if(rx_data == 255 && ((rxBufferIndex+1) >= rx_buffer[msgLength]) && ledsUpdateOk){
    17b0:	7802      	ldrb	r2, [r0, #0]
    17b2:	b2d2      	uxtb	r2, r2
    17b4:	1c59      	adds	r1, r3, #1
    17b6:	4291      	cmp	r1, r2
    17b8:	dbf6      	blt.n	17a8 <usart_read_callback+0x18>
    17ba:	4a10      	ldr	r2, [pc, #64]	; (17fc <usart_read_callback+0x6c>)
    17bc:	7812      	ldrb	r2, [r2, #0]
    17be:	2a00      	cmp	r2, #0
    17c0:	d0f2      	beq.n	17a8 <usart_read_callback+0x18>
		rxBufferIndex = 0;
    17c2:	2200      	movs	r2, #0
    17c4:	4b0a      	ldr	r3, [pc, #40]	; (17f0 <usart_read_callback+0x60>)
    17c6:	701a      	strb	r2, [r3, #0]
		uint16_t checkSumCalc = 2019 - checkSum(rx_buffer, B+1);
    17c8:	0004      	movs	r4, r0
    17ca:	2107      	movs	r1, #7
    17cc:	4b0c      	ldr	r3, [pc, #48]	; (1800 <usart_read_callback+0x70>)
    17ce:	4798      	blx	r3
		uint16_t checkSumRecv = (uint16_t) (rx_buffer[checkSum_MSB]<<8) | 
    17d0:	79e1      	ldrb	r1, [r4, #7]
								(uint16_t)  rx_buffer[checkSum_LSB];
    17d2:	7a22      	ldrb	r2, [r4, #8]
		uint16_t checkSumCalc = 2019 - checkSum(rx_buffer, B+1);
    17d4:	4b0b      	ldr	r3, [pc, #44]	; (1804 <usart_read_callback+0x74>)
    17d6:	1a18      	subs	r0, r3, r0
		uint16_t checkSumRecv = (uint16_t) (rx_buffer[checkSum_MSB]<<8) | 
    17d8:	020b      	lsls	r3, r1, #8
		if(checkSumCalc == checkSumRecv){
    17da:	b280      	uxth	r0, r0
    17dc:	4313      	orrs	r3, r2
    17de:	4298      	cmp	r0, r3
    17e0:	d1e5      	bne.n	17ae <usart_read_callback+0x1e>
			rxComplete = true;
    17e2:	2201      	movs	r2, #1
    17e4:	4b08      	ldr	r3, [pc, #32]	; (1808 <usart_read_callback+0x78>)
    17e6:	701a      	strb	r2, [r3, #0]
			ledsUpdateOk = false;
    17e8:	2200      	movs	r2, #0
    17ea:	4b04      	ldr	r3, [pc, #16]	; (17fc <usart_read_callback+0x6c>)
    17ec:	701a      	strb	r2, [r3, #0]
    17ee:	e7de      	b.n	17ae <usart_read_callback+0x1e>
    17f0:	200000c6 	.word	0x200000c6
    17f4:	20000137 	.word	0x20000137
    17f8:	2000012c 	.word	0x2000012c
    17fc:	20000009 	.word	0x20000009
    1800:	0000176f 	.word	0x0000176f
    1804:	000007e3 	.word	0x000007e3
    1808:	200000c7 	.word	0x200000c7

0000180c <configure_usart>:
//! [callback_funcs]


//! [setup]
void configure_usart(void)
{
    180c:	b530      	push	{r4, r5, lr}
    180e:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    1810:	2380      	movs	r3, #128	; 0x80
    1812:	05db      	lsls	r3, r3, #23
    1814:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    1816:	2300      	movs	r3, #0
    1818:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    181a:	22ff      	movs	r2, #255	; 0xff
    181c:	4669      	mov	r1, sp
    181e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    1820:	2200      	movs	r2, #0
    1822:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    1824:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    1826:	2101      	movs	r1, #1
    1828:	2024      	movs	r0, #36	; 0x24
    182a:	466c      	mov	r4, sp
    182c:	5421      	strb	r1, [r4, r0]
	config->transmitter_enable = true;
    182e:	3001      	adds	r0, #1
    1830:	5421      	strb	r1, [r4, r0]
	config->clock_polarity_inverted = false;
    1832:	3125      	adds	r1, #37	; 0x25
    1834:	5463      	strb	r3, [r4, r1]
	config->use_external_clock = false;
    1836:	3101      	adds	r1, #1
    1838:	5463      	strb	r3, [r4, r1]
	config->ext_clock_freq   = 0;
    183a:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    183c:	3105      	adds	r1, #5
    183e:	5463      	strb	r3, [r4, r1]
	config->generator_source = GCLK_GENERATOR_0;
    1840:	3101      	adds	r1, #1
    1842:	5463      	strb	r3, [r4, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    1844:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    1846:	8223      	strh	r3, [r4, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    1848:	76e3      	strb	r3, [r4, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    184a:	7622      	strb	r2, [r4, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    184c:	7722      	strb	r2, [r4, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    184e:	7662      	strb	r2, [r4, #25]
	config->receive_pulse_length                    = 19;
    1850:	2313      	movs	r3, #19
    1852:	76a3      	strb	r3, [r4, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    1854:	7762      	strb	r2, [r4, #29]
	//! [setup_config_defaults]
	usart_get_config_defaults(&config_usart);
	//! [setup_config_defaults]

	//! [setup_change_config]
	config_usart.baudrate    = 250000;
    1856:	4b15      	ldr	r3, [pc, #84]	; (18ac <configure_usart+0xa0>)
    1858:	9308      	str	r3, [sp, #32]
	config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    185a:	23c4      	movs	r3, #196	; 0xc4
    185c:	039b      	lsls	r3, r3, #14
    185e:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    1860:	2301      	movs	r3, #1
    1862:	425b      	negs	r3, r3
    1864:	930c      	str	r3, [sp, #48]	; 0x30
	config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    1866:	930d      	str	r3, [sp, #52]	; 0x34
	config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    1868:	4b11      	ldr	r3, [pc, #68]	; (18b0 <configure_usart+0xa4>)
    186a:	930e      	str	r3, [sp, #56]	; 0x38
	config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    186c:	4b11      	ldr	r3, [pc, #68]	; (18b4 <configure_usart+0xa8>)
    186e:	930f      	str	r3, [sp, #60]	; 0x3c
	//! [setup_change_config]
	//usart_instance.hw->USART.CTRLA.bit.RXPO = 0x3;
	//usart_instance.hw->USART.CTRLA.bit.TXPO = 0x0;
	//usart_instance.hw->USART.CTRLB.bit.RXEN = true;
	//! [setup_set_config]
	while (usart_init(&usart_instance,
    1870:	4d11      	ldr	r5, [pc, #68]	; (18b8 <configure_usart+0xac>)
    1872:	4c12      	ldr	r4, [pc, #72]	; (18bc <configure_usart+0xb0>)
    1874:	466a      	mov	r2, sp
    1876:	4912      	ldr	r1, [pc, #72]	; (18c0 <configure_usart+0xb4>)
    1878:	0028      	movs	r0, r5
    187a:	47a0      	blx	r4
    187c:	2800      	cmp	r0, #0
    187e:	d1f9      	bne.n	1874 <configure_usart+0x68>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1880:	4d0d      	ldr	r5, [pc, #52]	; (18b8 <configure_usart+0xac>)
    1882:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1884:	0020      	movs	r0, r4
    1886:	4b0f      	ldr	r3, [pc, #60]	; (18c4 <configure_usart+0xb8>)
    1888:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    188a:	231f      	movs	r3, #31
    188c:	4018      	ands	r0, r3
    188e:	3b1e      	subs	r3, #30
    1890:	4083      	lsls	r3, r0
    1892:	4a0d      	ldr	r2, [pc, #52]	; (18c8 <configure_usart+0xbc>)
    1894:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1896:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1898:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    189a:	2b00      	cmp	r3, #0
    189c:	d1fc      	bne.n	1898 <configure_usart+0x8c>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    189e:	6823      	ldr	r3, [r4, #0]
    18a0:	2202      	movs	r2, #2
    18a2:	4313      	orrs	r3, r2
    18a4:	6023      	str	r3, [r4, #0]
	//! [setup_set_config]
	
	//! [setup_enable]
	usart_enable(&usart_instance);
	//! [setup_enable]
}
    18a6:	b011      	add	sp, #68	; 0x44
    18a8:	bd30      	pop	{r4, r5, pc}
    18aa:	46c0      	nop			; (mov r8, r8)
    18ac:	0003d090 	.word	0x0003d090
    18b0:	000a0003 	.word	0x000a0003
    18b4:	000b0003 	.word	0x000b0003
    18b8:	200000f8 	.word	0x200000f8
    18bc:	000008c9 	.word	0x000008c9
    18c0:	42001000 	.word	0x42001000
    18c4:	00000879 	.word	0x00000879
    18c8:	e000e100 	.word	0xe000e100

000018cc <configure_usart_callbacks>:

void configure_usart_callbacks(void)
{
    18cc:	b570      	push	{r4, r5, r6, lr}
	//! [setup_register_callbacks]
	usart_register_callback(&usart_instance,
    18ce:	4c08      	ldr	r4, [pc, #32]	; (18f0 <configure_usart_callbacks+0x24>)
    18d0:	2200      	movs	r2, #0
    18d2:	4908      	ldr	r1, [pc, #32]	; (18f4 <configure_usart_callbacks+0x28>)
    18d4:	0020      	movs	r0, r4
    18d6:	4d08      	ldr	r5, [pc, #32]	; (18f8 <configure_usart_callbacks+0x2c>)
    18d8:	47a8      	blx	r5
	usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_register_callback(&usart_instance,
    18da:	2201      	movs	r2, #1
    18dc:	4907      	ldr	r1, [pc, #28]	; (18fc <configure_usart_callbacks+0x30>)
    18de:	0020      	movs	r0, r4
    18e0:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
    18e2:	2231      	movs	r2, #49	; 0x31
    18e4:	5ca3      	ldrb	r3, [r4, r2]
    18e6:	2103      	movs	r1, #3
    18e8:	430b      	orrs	r3, r1
    18ea:	54a3      	strb	r3, [r4, r2]

	//! [setup_enable_callbacks]
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
	usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
	//! [setup_enable_callbacks]
}
    18ec:	bd70      	pop	{r4, r5, r6, pc}
    18ee:	46c0      	nop			; (mov r8, r8)
    18f0:	200000f8 	.word	0x200000f8
    18f4:	0000176d 	.word	0x0000176d
    18f8:	00000c0d 	.word	0x00000c0d
    18fc:	00001791 	.word	0x00001791

00001900 <SysTick_Handler>:
*/
void SysTick_Handler(void)
{
	//if(blinkLED){
		//if(--ticks == 0 && blinkLEDcount){
		if(--ticks == 0){
    1900:	4a09      	ldr	r2, [pc, #36]	; (1928 <SysTick_Handler+0x28>)
    1902:	6813      	ldr	r3, [r2, #0]
    1904:	3b01      	subs	r3, #1
    1906:	6013      	str	r3, [r2, #0]
    1908:	2b00      	cmp	r3, #0
    190a:	d10b      	bne.n	1924 <SysTick_Handler+0x24>
			ticks = LED_BLINK_TICKS;
    190c:	22fa      	movs	r2, #250	; 0xfa
    190e:	0052      	lsls	r2, r2, #1
    1910:	4b05      	ldr	r3, [pc, #20]	; (1928 <SysTick_Handler+0x28>)
    1912:	601a      	str	r2, [r3, #0]
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    1914:	2280      	movs	r2, #128	; 0x80
    1916:	0252      	lsls	r2, r2, #9
    1918:	4b04      	ldr	r3, [pc, #16]	; (192c <SysTick_Handler+0x2c>)
    191a:	61da      	str	r2, [r3, #28]
			port_pin_toggle_output_level(LED_0_PIN);
			blinkLEDcount--;
    191c:	4a04      	ldr	r2, [pc, #16]	; (1930 <SysTick_Handler+0x30>)
    191e:	7813      	ldrb	r3, [r2, #0]
    1920:	3b01      	subs	r3, #1
    1922:	7013      	strb	r3, [r2, #0]
		}
	//}

}
    1924:	4770      	bx	lr
    1926:	46c0      	nop			; (mov r8, r8)
    1928:	2000000c 	.word	0x2000000c
    192c:	41004400 	.word	0x41004400
    1930:	200000c5 	.word	0x200000c5

00001934 <main>:
	
}

// PA22
int main (void)
{
    1934:	b510      	push	{r4, lr}
    1936:	b082      	sub	sp, #8
	system_init();
    1938:	4b24      	ldr	r3, [pc, #144]	; (19cc <main+0x98>)
    193a:	4798      	blx	r3
	delay_init();
    193c:	4b24      	ldr	r3, [pc, #144]	; (19d0 <main+0x9c>)
    193e:	4798      	blx	r3
	config->input_pull = PORT_PIN_PULL_UP;
    1940:	a901      	add	r1, sp, #4
    1942:	2301      	movs	r3, #1
    1944:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    1946:	2200      	movs	r2, #0
    1948:	708a      	strb	r2, [r1, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    194a:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
    194c:	2010      	movs	r0, #16
    194e:	4b21      	ldr	r3, [pc, #132]	; (19d4 <main+0xa0>)
    1950:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    1952:	2280      	movs	r2, #128	; 0x80
    1954:	0252      	lsls	r2, r2, #9
    1956:	4b20      	ldr	r3, [pc, #128]	; (19d8 <main+0xa4>)
    1958:	619a      	str	r2, [r3, #24]
	config_led();
	configure_usart();
    195a:	4b20      	ldr	r3, [pc, #128]	; (19dc <main+0xa8>)
    195c:	4798      	blx	r3
	configure_usart_callbacks();
    195e:	4b20      	ldr	r3, [pc, #128]	; (19e0 <main+0xac>)
    1960:	4798      	blx	r3

	pixelsBegin(NUM_LEDS, ENC1_LED_PIN, NEO_GRB + NEO_KHZ800);
    1962:	2252      	movs	r2, #82	; 0x52
    1964:	210f      	movs	r1, #15
    1966:	2080      	movs	r0, #128	; 0x80
    1968:	4b1e      	ldr	r3, [pc, #120]	; (19e4 <main+0xb0>)
    196a:	4798      	blx	r3
	
	
	/*Configure system tick to generate periodic interrupts */
	SysTick_Config(ONE_SEC);
    196c:	2000      	movs	r0, #0
    196e:	4b1e      	ldr	r3, [pc, #120]	; (19e8 <main+0xb4>)
    1970:	4798      	blx	r3
    1972:	21fa      	movs	r1, #250	; 0xfa
    1974:	0089      	lsls	r1, r1, #2
    1976:	4b1d      	ldr	r3, [pc, #116]	; (19ec <main+0xb8>)
    1978:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    197a:	3801      	subs	r0, #1
    197c:	4b1c      	ldr	r3, [pc, #112]	; (19f0 <main+0xbc>)
    197e:	4298      	cmp	r0, r3
    1980:	d80d      	bhi.n	199e <main+0x6a>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    1982:	4a1c      	ldr	r2, [pc, #112]	; (19f4 <main+0xc0>)
    1984:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    1986:	481c      	ldr	r0, [pc, #112]	; (19f8 <main+0xc4>)
    1988:	6a03      	ldr	r3, [r0, #32]
    198a:	021b      	lsls	r3, r3, #8
    198c:	0a1b      	lsrs	r3, r3, #8
    198e:	21c0      	movs	r1, #192	; 0xc0
    1990:	0609      	lsls	r1, r1, #24
    1992:	430b      	orrs	r3, r1
    1994:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    1996:	2300      	movs	r3, #0
    1998:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    199a:	3307      	adds	r3, #7
    199c:	6013      	str	r3, [r2, #0]

	blinkLED = true;
    199e:	2201      	movs	r2, #1
    19a0:	4b16      	ldr	r3, [pc, #88]	; (19fc <main+0xc8>)
    19a2:	701a      	strb	r2, [r3, #0]
	blinkLEDcount = 4;
    19a4:	3203      	adds	r2, #3
    19a6:	4b16      	ldr	r3, [pc, #88]	; (1a00 <main+0xcc>)
    19a8:	701a      	strb	r2, [r3, #0]

	//	while(1);
	setBrightness(40);
    19aa:	2028      	movs	r0, #40	; 0x28
    19ac:	4b15      	ldr	r3, [pc, #84]	; (1a04 <main+0xd0>)
    19ae:	4798      	blx	r3
	setAll(0,0,0);
    19b0:	2200      	movs	r2, #0
    19b2:	2100      	movs	r1, #0
    19b4:	2000      	movs	r0, #0
    19b6:	4b14      	ldr	r3, [pc, #80]	; (1a08 <main+0xd4>)
    19b8:	4798      	blx	r3
	pixelsShow();
    19ba:	4b14      	ldr	r3, [pc, #80]	; (1a0c <main+0xd8>)
    19bc:	4798      	blx	r3
	delay(200);
    19be:	20c8      	movs	r0, #200	; 0xc8
    19c0:	4b13      	ldr	r3, [pc, #76]	; (1a10 <main+0xdc>)
    19c2:	4798      	blx	r3
			//rxComplete = false;
			//port_pin_toggle_output_level(LED_0_PIN);
			//UpdateLEDs(rx_buffer[nRing], rx_buffer[ringStateH], rx_buffer[ringStateL], rx_buffer[R], rx_buffer[G], rx_buffer[B]);
			//ledsUpdateOk = true;
		//}
		rainbow(10);
    19c4:	4c13      	ldr	r4, [pc, #76]	; (1a14 <main+0xe0>)
    19c6:	200a      	movs	r0, #10
    19c8:	47a0      	blx	r4
    19ca:	e7fc      	b.n	19c6 <main+0x92>
    19cc:	00001635 	.word	0x00001635
    19d0:	000004e5 	.word	0x000004e5
    19d4:	00000ee5 	.word	0x00000ee5
    19d8:	41004400 	.word	0x41004400
    19dc:	0000180d 	.word	0x0000180d
    19e0:	000018cd 	.word	0x000018cd
    19e4:	000000ed 	.word	0x000000ed
    19e8:	000013f1 	.word	0x000013f1
    19ec:	00001a19 	.word	0x00001a19
    19f0:	00ffffff 	.word	0x00ffffff
    19f4:	e000e010 	.word	0xe000e010
    19f8:	e000ed00 	.word	0xe000ed00
    19fc:	200000c4 	.word	0x200000c4
    1a00:	200000c5 	.word	0x200000c5
    1a04:	00000349 	.word	0x00000349
    1a08:	000003b9 	.word	0x000003b9
    1a0c:	000001b5 	.word	0x000001b5
    1a10:	00000441 	.word	0x00000441
    1a14:	0000045d 	.word	0x0000045d

00001a18 <__udivsi3>:
    1a18:	2200      	movs	r2, #0
    1a1a:	0843      	lsrs	r3, r0, #1
    1a1c:	428b      	cmp	r3, r1
    1a1e:	d374      	bcc.n	1b0a <__udivsi3+0xf2>
    1a20:	0903      	lsrs	r3, r0, #4
    1a22:	428b      	cmp	r3, r1
    1a24:	d35f      	bcc.n	1ae6 <__udivsi3+0xce>
    1a26:	0a03      	lsrs	r3, r0, #8
    1a28:	428b      	cmp	r3, r1
    1a2a:	d344      	bcc.n	1ab6 <__udivsi3+0x9e>
    1a2c:	0b03      	lsrs	r3, r0, #12
    1a2e:	428b      	cmp	r3, r1
    1a30:	d328      	bcc.n	1a84 <__udivsi3+0x6c>
    1a32:	0c03      	lsrs	r3, r0, #16
    1a34:	428b      	cmp	r3, r1
    1a36:	d30d      	bcc.n	1a54 <__udivsi3+0x3c>
    1a38:	22ff      	movs	r2, #255	; 0xff
    1a3a:	0209      	lsls	r1, r1, #8
    1a3c:	ba12      	rev	r2, r2
    1a3e:	0c03      	lsrs	r3, r0, #16
    1a40:	428b      	cmp	r3, r1
    1a42:	d302      	bcc.n	1a4a <__udivsi3+0x32>
    1a44:	1212      	asrs	r2, r2, #8
    1a46:	0209      	lsls	r1, r1, #8
    1a48:	d065      	beq.n	1b16 <__udivsi3+0xfe>
    1a4a:	0b03      	lsrs	r3, r0, #12
    1a4c:	428b      	cmp	r3, r1
    1a4e:	d319      	bcc.n	1a84 <__udivsi3+0x6c>
    1a50:	e000      	b.n	1a54 <__udivsi3+0x3c>
    1a52:	0a09      	lsrs	r1, r1, #8
    1a54:	0bc3      	lsrs	r3, r0, #15
    1a56:	428b      	cmp	r3, r1
    1a58:	d301      	bcc.n	1a5e <__udivsi3+0x46>
    1a5a:	03cb      	lsls	r3, r1, #15
    1a5c:	1ac0      	subs	r0, r0, r3
    1a5e:	4152      	adcs	r2, r2
    1a60:	0b83      	lsrs	r3, r0, #14
    1a62:	428b      	cmp	r3, r1
    1a64:	d301      	bcc.n	1a6a <__udivsi3+0x52>
    1a66:	038b      	lsls	r3, r1, #14
    1a68:	1ac0      	subs	r0, r0, r3
    1a6a:	4152      	adcs	r2, r2
    1a6c:	0b43      	lsrs	r3, r0, #13
    1a6e:	428b      	cmp	r3, r1
    1a70:	d301      	bcc.n	1a76 <__udivsi3+0x5e>
    1a72:	034b      	lsls	r3, r1, #13
    1a74:	1ac0      	subs	r0, r0, r3
    1a76:	4152      	adcs	r2, r2
    1a78:	0b03      	lsrs	r3, r0, #12
    1a7a:	428b      	cmp	r3, r1
    1a7c:	d301      	bcc.n	1a82 <__udivsi3+0x6a>
    1a7e:	030b      	lsls	r3, r1, #12
    1a80:	1ac0      	subs	r0, r0, r3
    1a82:	4152      	adcs	r2, r2
    1a84:	0ac3      	lsrs	r3, r0, #11
    1a86:	428b      	cmp	r3, r1
    1a88:	d301      	bcc.n	1a8e <__udivsi3+0x76>
    1a8a:	02cb      	lsls	r3, r1, #11
    1a8c:	1ac0      	subs	r0, r0, r3
    1a8e:	4152      	adcs	r2, r2
    1a90:	0a83      	lsrs	r3, r0, #10
    1a92:	428b      	cmp	r3, r1
    1a94:	d301      	bcc.n	1a9a <__udivsi3+0x82>
    1a96:	028b      	lsls	r3, r1, #10
    1a98:	1ac0      	subs	r0, r0, r3
    1a9a:	4152      	adcs	r2, r2
    1a9c:	0a43      	lsrs	r3, r0, #9
    1a9e:	428b      	cmp	r3, r1
    1aa0:	d301      	bcc.n	1aa6 <__udivsi3+0x8e>
    1aa2:	024b      	lsls	r3, r1, #9
    1aa4:	1ac0      	subs	r0, r0, r3
    1aa6:	4152      	adcs	r2, r2
    1aa8:	0a03      	lsrs	r3, r0, #8
    1aaa:	428b      	cmp	r3, r1
    1aac:	d301      	bcc.n	1ab2 <__udivsi3+0x9a>
    1aae:	020b      	lsls	r3, r1, #8
    1ab0:	1ac0      	subs	r0, r0, r3
    1ab2:	4152      	adcs	r2, r2
    1ab4:	d2cd      	bcs.n	1a52 <__udivsi3+0x3a>
    1ab6:	09c3      	lsrs	r3, r0, #7
    1ab8:	428b      	cmp	r3, r1
    1aba:	d301      	bcc.n	1ac0 <__udivsi3+0xa8>
    1abc:	01cb      	lsls	r3, r1, #7
    1abe:	1ac0      	subs	r0, r0, r3
    1ac0:	4152      	adcs	r2, r2
    1ac2:	0983      	lsrs	r3, r0, #6
    1ac4:	428b      	cmp	r3, r1
    1ac6:	d301      	bcc.n	1acc <__udivsi3+0xb4>
    1ac8:	018b      	lsls	r3, r1, #6
    1aca:	1ac0      	subs	r0, r0, r3
    1acc:	4152      	adcs	r2, r2
    1ace:	0943      	lsrs	r3, r0, #5
    1ad0:	428b      	cmp	r3, r1
    1ad2:	d301      	bcc.n	1ad8 <__udivsi3+0xc0>
    1ad4:	014b      	lsls	r3, r1, #5
    1ad6:	1ac0      	subs	r0, r0, r3
    1ad8:	4152      	adcs	r2, r2
    1ada:	0903      	lsrs	r3, r0, #4
    1adc:	428b      	cmp	r3, r1
    1ade:	d301      	bcc.n	1ae4 <__udivsi3+0xcc>
    1ae0:	010b      	lsls	r3, r1, #4
    1ae2:	1ac0      	subs	r0, r0, r3
    1ae4:	4152      	adcs	r2, r2
    1ae6:	08c3      	lsrs	r3, r0, #3
    1ae8:	428b      	cmp	r3, r1
    1aea:	d301      	bcc.n	1af0 <__udivsi3+0xd8>
    1aec:	00cb      	lsls	r3, r1, #3
    1aee:	1ac0      	subs	r0, r0, r3
    1af0:	4152      	adcs	r2, r2
    1af2:	0883      	lsrs	r3, r0, #2
    1af4:	428b      	cmp	r3, r1
    1af6:	d301      	bcc.n	1afc <__udivsi3+0xe4>
    1af8:	008b      	lsls	r3, r1, #2
    1afa:	1ac0      	subs	r0, r0, r3
    1afc:	4152      	adcs	r2, r2
    1afe:	0843      	lsrs	r3, r0, #1
    1b00:	428b      	cmp	r3, r1
    1b02:	d301      	bcc.n	1b08 <__udivsi3+0xf0>
    1b04:	004b      	lsls	r3, r1, #1
    1b06:	1ac0      	subs	r0, r0, r3
    1b08:	4152      	adcs	r2, r2
    1b0a:	1a41      	subs	r1, r0, r1
    1b0c:	d200      	bcs.n	1b10 <__udivsi3+0xf8>
    1b0e:	4601      	mov	r1, r0
    1b10:	4152      	adcs	r2, r2
    1b12:	4610      	mov	r0, r2
    1b14:	4770      	bx	lr
    1b16:	e7ff      	b.n	1b18 <__udivsi3+0x100>
    1b18:	b501      	push	{r0, lr}
    1b1a:	2000      	movs	r0, #0
    1b1c:	f000 f8f0 	bl	1d00 <__aeabi_idiv0>
    1b20:	bd02      	pop	{r1, pc}
    1b22:	46c0      	nop			; (mov r8, r8)

00001b24 <__aeabi_uidivmod>:
    1b24:	2900      	cmp	r1, #0
    1b26:	d0f7      	beq.n	1b18 <__udivsi3+0x100>
    1b28:	e776      	b.n	1a18 <__udivsi3>
    1b2a:	4770      	bx	lr

00001b2c <__divsi3>:
    1b2c:	4603      	mov	r3, r0
    1b2e:	430b      	orrs	r3, r1
    1b30:	d47f      	bmi.n	1c32 <__divsi3+0x106>
    1b32:	2200      	movs	r2, #0
    1b34:	0843      	lsrs	r3, r0, #1
    1b36:	428b      	cmp	r3, r1
    1b38:	d374      	bcc.n	1c24 <__divsi3+0xf8>
    1b3a:	0903      	lsrs	r3, r0, #4
    1b3c:	428b      	cmp	r3, r1
    1b3e:	d35f      	bcc.n	1c00 <__divsi3+0xd4>
    1b40:	0a03      	lsrs	r3, r0, #8
    1b42:	428b      	cmp	r3, r1
    1b44:	d344      	bcc.n	1bd0 <__divsi3+0xa4>
    1b46:	0b03      	lsrs	r3, r0, #12
    1b48:	428b      	cmp	r3, r1
    1b4a:	d328      	bcc.n	1b9e <__divsi3+0x72>
    1b4c:	0c03      	lsrs	r3, r0, #16
    1b4e:	428b      	cmp	r3, r1
    1b50:	d30d      	bcc.n	1b6e <__divsi3+0x42>
    1b52:	22ff      	movs	r2, #255	; 0xff
    1b54:	0209      	lsls	r1, r1, #8
    1b56:	ba12      	rev	r2, r2
    1b58:	0c03      	lsrs	r3, r0, #16
    1b5a:	428b      	cmp	r3, r1
    1b5c:	d302      	bcc.n	1b64 <__divsi3+0x38>
    1b5e:	1212      	asrs	r2, r2, #8
    1b60:	0209      	lsls	r1, r1, #8
    1b62:	d065      	beq.n	1c30 <__divsi3+0x104>
    1b64:	0b03      	lsrs	r3, r0, #12
    1b66:	428b      	cmp	r3, r1
    1b68:	d319      	bcc.n	1b9e <__divsi3+0x72>
    1b6a:	e000      	b.n	1b6e <__divsi3+0x42>
    1b6c:	0a09      	lsrs	r1, r1, #8
    1b6e:	0bc3      	lsrs	r3, r0, #15
    1b70:	428b      	cmp	r3, r1
    1b72:	d301      	bcc.n	1b78 <__divsi3+0x4c>
    1b74:	03cb      	lsls	r3, r1, #15
    1b76:	1ac0      	subs	r0, r0, r3
    1b78:	4152      	adcs	r2, r2
    1b7a:	0b83      	lsrs	r3, r0, #14
    1b7c:	428b      	cmp	r3, r1
    1b7e:	d301      	bcc.n	1b84 <__divsi3+0x58>
    1b80:	038b      	lsls	r3, r1, #14
    1b82:	1ac0      	subs	r0, r0, r3
    1b84:	4152      	adcs	r2, r2
    1b86:	0b43      	lsrs	r3, r0, #13
    1b88:	428b      	cmp	r3, r1
    1b8a:	d301      	bcc.n	1b90 <__divsi3+0x64>
    1b8c:	034b      	lsls	r3, r1, #13
    1b8e:	1ac0      	subs	r0, r0, r3
    1b90:	4152      	adcs	r2, r2
    1b92:	0b03      	lsrs	r3, r0, #12
    1b94:	428b      	cmp	r3, r1
    1b96:	d301      	bcc.n	1b9c <__divsi3+0x70>
    1b98:	030b      	lsls	r3, r1, #12
    1b9a:	1ac0      	subs	r0, r0, r3
    1b9c:	4152      	adcs	r2, r2
    1b9e:	0ac3      	lsrs	r3, r0, #11
    1ba0:	428b      	cmp	r3, r1
    1ba2:	d301      	bcc.n	1ba8 <__divsi3+0x7c>
    1ba4:	02cb      	lsls	r3, r1, #11
    1ba6:	1ac0      	subs	r0, r0, r3
    1ba8:	4152      	adcs	r2, r2
    1baa:	0a83      	lsrs	r3, r0, #10
    1bac:	428b      	cmp	r3, r1
    1bae:	d301      	bcc.n	1bb4 <__divsi3+0x88>
    1bb0:	028b      	lsls	r3, r1, #10
    1bb2:	1ac0      	subs	r0, r0, r3
    1bb4:	4152      	adcs	r2, r2
    1bb6:	0a43      	lsrs	r3, r0, #9
    1bb8:	428b      	cmp	r3, r1
    1bba:	d301      	bcc.n	1bc0 <__divsi3+0x94>
    1bbc:	024b      	lsls	r3, r1, #9
    1bbe:	1ac0      	subs	r0, r0, r3
    1bc0:	4152      	adcs	r2, r2
    1bc2:	0a03      	lsrs	r3, r0, #8
    1bc4:	428b      	cmp	r3, r1
    1bc6:	d301      	bcc.n	1bcc <__divsi3+0xa0>
    1bc8:	020b      	lsls	r3, r1, #8
    1bca:	1ac0      	subs	r0, r0, r3
    1bcc:	4152      	adcs	r2, r2
    1bce:	d2cd      	bcs.n	1b6c <__divsi3+0x40>
    1bd0:	09c3      	lsrs	r3, r0, #7
    1bd2:	428b      	cmp	r3, r1
    1bd4:	d301      	bcc.n	1bda <__divsi3+0xae>
    1bd6:	01cb      	lsls	r3, r1, #7
    1bd8:	1ac0      	subs	r0, r0, r3
    1bda:	4152      	adcs	r2, r2
    1bdc:	0983      	lsrs	r3, r0, #6
    1bde:	428b      	cmp	r3, r1
    1be0:	d301      	bcc.n	1be6 <__divsi3+0xba>
    1be2:	018b      	lsls	r3, r1, #6
    1be4:	1ac0      	subs	r0, r0, r3
    1be6:	4152      	adcs	r2, r2
    1be8:	0943      	lsrs	r3, r0, #5
    1bea:	428b      	cmp	r3, r1
    1bec:	d301      	bcc.n	1bf2 <__divsi3+0xc6>
    1bee:	014b      	lsls	r3, r1, #5
    1bf0:	1ac0      	subs	r0, r0, r3
    1bf2:	4152      	adcs	r2, r2
    1bf4:	0903      	lsrs	r3, r0, #4
    1bf6:	428b      	cmp	r3, r1
    1bf8:	d301      	bcc.n	1bfe <__divsi3+0xd2>
    1bfa:	010b      	lsls	r3, r1, #4
    1bfc:	1ac0      	subs	r0, r0, r3
    1bfe:	4152      	adcs	r2, r2
    1c00:	08c3      	lsrs	r3, r0, #3
    1c02:	428b      	cmp	r3, r1
    1c04:	d301      	bcc.n	1c0a <__divsi3+0xde>
    1c06:	00cb      	lsls	r3, r1, #3
    1c08:	1ac0      	subs	r0, r0, r3
    1c0a:	4152      	adcs	r2, r2
    1c0c:	0883      	lsrs	r3, r0, #2
    1c0e:	428b      	cmp	r3, r1
    1c10:	d301      	bcc.n	1c16 <__divsi3+0xea>
    1c12:	008b      	lsls	r3, r1, #2
    1c14:	1ac0      	subs	r0, r0, r3
    1c16:	4152      	adcs	r2, r2
    1c18:	0843      	lsrs	r3, r0, #1
    1c1a:	428b      	cmp	r3, r1
    1c1c:	d301      	bcc.n	1c22 <__divsi3+0xf6>
    1c1e:	004b      	lsls	r3, r1, #1
    1c20:	1ac0      	subs	r0, r0, r3
    1c22:	4152      	adcs	r2, r2
    1c24:	1a41      	subs	r1, r0, r1
    1c26:	d200      	bcs.n	1c2a <__divsi3+0xfe>
    1c28:	4601      	mov	r1, r0
    1c2a:	4152      	adcs	r2, r2
    1c2c:	4610      	mov	r0, r2
    1c2e:	4770      	bx	lr
    1c30:	e05d      	b.n	1cee <__divsi3+0x1c2>
    1c32:	0fca      	lsrs	r2, r1, #31
    1c34:	d000      	beq.n	1c38 <__divsi3+0x10c>
    1c36:	4249      	negs	r1, r1
    1c38:	1003      	asrs	r3, r0, #32
    1c3a:	d300      	bcc.n	1c3e <__divsi3+0x112>
    1c3c:	4240      	negs	r0, r0
    1c3e:	4053      	eors	r3, r2
    1c40:	2200      	movs	r2, #0
    1c42:	469c      	mov	ip, r3
    1c44:	0903      	lsrs	r3, r0, #4
    1c46:	428b      	cmp	r3, r1
    1c48:	d32d      	bcc.n	1ca6 <__divsi3+0x17a>
    1c4a:	0a03      	lsrs	r3, r0, #8
    1c4c:	428b      	cmp	r3, r1
    1c4e:	d312      	bcc.n	1c76 <__divsi3+0x14a>
    1c50:	22fc      	movs	r2, #252	; 0xfc
    1c52:	0189      	lsls	r1, r1, #6
    1c54:	ba12      	rev	r2, r2
    1c56:	0a03      	lsrs	r3, r0, #8
    1c58:	428b      	cmp	r3, r1
    1c5a:	d30c      	bcc.n	1c76 <__divsi3+0x14a>
    1c5c:	0189      	lsls	r1, r1, #6
    1c5e:	1192      	asrs	r2, r2, #6
    1c60:	428b      	cmp	r3, r1
    1c62:	d308      	bcc.n	1c76 <__divsi3+0x14a>
    1c64:	0189      	lsls	r1, r1, #6
    1c66:	1192      	asrs	r2, r2, #6
    1c68:	428b      	cmp	r3, r1
    1c6a:	d304      	bcc.n	1c76 <__divsi3+0x14a>
    1c6c:	0189      	lsls	r1, r1, #6
    1c6e:	d03a      	beq.n	1ce6 <__divsi3+0x1ba>
    1c70:	1192      	asrs	r2, r2, #6
    1c72:	e000      	b.n	1c76 <__divsi3+0x14a>
    1c74:	0989      	lsrs	r1, r1, #6
    1c76:	09c3      	lsrs	r3, r0, #7
    1c78:	428b      	cmp	r3, r1
    1c7a:	d301      	bcc.n	1c80 <__divsi3+0x154>
    1c7c:	01cb      	lsls	r3, r1, #7
    1c7e:	1ac0      	subs	r0, r0, r3
    1c80:	4152      	adcs	r2, r2
    1c82:	0983      	lsrs	r3, r0, #6
    1c84:	428b      	cmp	r3, r1
    1c86:	d301      	bcc.n	1c8c <__divsi3+0x160>
    1c88:	018b      	lsls	r3, r1, #6
    1c8a:	1ac0      	subs	r0, r0, r3
    1c8c:	4152      	adcs	r2, r2
    1c8e:	0943      	lsrs	r3, r0, #5
    1c90:	428b      	cmp	r3, r1
    1c92:	d301      	bcc.n	1c98 <__divsi3+0x16c>
    1c94:	014b      	lsls	r3, r1, #5
    1c96:	1ac0      	subs	r0, r0, r3
    1c98:	4152      	adcs	r2, r2
    1c9a:	0903      	lsrs	r3, r0, #4
    1c9c:	428b      	cmp	r3, r1
    1c9e:	d301      	bcc.n	1ca4 <__divsi3+0x178>
    1ca0:	010b      	lsls	r3, r1, #4
    1ca2:	1ac0      	subs	r0, r0, r3
    1ca4:	4152      	adcs	r2, r2
    1ca6:	08c3      	lsrs	r3, r0, #3
    1ca8:	428b      	cmp	r3, r1
    1caa:	d301      	bcc.n	1cb0 <__divsi3+0x184>
    1cac:	00cb      	lsls	r3, r1, #3
    1cae:	1ac0      	subs	r0, r0, r3
    1cb0:	4152      	adcs	r2, r2
    1cb2:	0883      	lsrs	r3, r0, #2
    1cb4:	428b      	cmp	r3, r1
    1cb6:	d301      	bcc.n	1cbc <__divsi3+0x190>
    1cb8:	008b      	lsls	r3, r1, #2
    1cba:	1ac0      	subs	r0, r0, r3
    1cbc:	4152      	adcs	r2, r2
    1cbe:	d2d9      	bcs.n	1c74 <__divsi3+0x148>
    1cc0:	0843      	lsrs	r3, r0, #1
    1cc2:	428b      	cmp	r3, r1
    1cc4:	d301      	bcc.n	1cca <__divsi3+0x19e>
    1cc6:	004b      	lsls	r3, r1, #1
    1cc8:	1ac0      	subs	r0, r0, r3
    1cca:	4152      	adcs	r2, r2
    1ccc:	1a41      	subs	r1, r0, r1
    1cce:	d200      	bcs.n	1cd2 <__divsi3+0x1a6>
    1cd0:	4601      	mov	r1, r0
    1cd2:	4663      	mov	r3, ip
    1cd4:	4152      	adcs	r2, r2
    1cd6:	105b      	asrs	r3, r3, #1
    1cd8:	4610      	mov	r0, r2
    1cda:	d301      	bcc.n	1ce0 <__divsi3+0x1b4>
    1cdc:	4240      	negs	r0, r0
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d500      	bpl.n	1ce4 <__divsi3+0x1b8>
    1ce2:	4249      	negs	r1, r1
    1ce4:	4770      	bx	lr
    1ce6:	4663      	mov	r3, ip
    1ce8:	105b      	asrs	r3, r3, #1
    1cea:	d300      	bcc.n	1cee <__divsi3+0x1c2>
    1cec:	4240      	negs	r0, r0
    1cee:	b501      	push	{r0, lr}
    1cf0:	2000      	movs	r0, #0
    1cf2:	f000 f805 	bl	1d00 <__aeabi_idiv0>
    1cf6:	bd02      	pop	{r1, pc}

00001cf8 <__aeabi_idivmod>:
    1cf8:	2900      	cmp	r1, #0
    1cfa:	d0f8      	beq.n	1cee <__divsi3+0x1c2>
    1cfc:	e716      	b.n	1b2c <__divsi3>
    1cfe:	4770      	bx	lr

00001d00 <__aeabi_idiv0>:
    1d00:	4770      	bx	lr
    1d02:	46c0      	nop			; (mov r8, r8)

00001d04 <__aeabi_lmul>:
    1d04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d06:	46ce      	mov	lr, r9
    1d08:	4647      	mov	r7, r8
    1d0a:	0415      	lsls	r5, r2, #16
    1d0c:	0c2d      	lsrs	r5, r5, #16
    1d0e:	002e      	movs	r6, r5
    1d10:	b580      	push	{r7, lr}
    1d12:	0407      	lsls	r7, r0, #16
    1d14:	0c14      	lsrs	r4, r2, #16
    1d16:	0c3f      	lsrs	r7, r7, #16
    1d18:	4699      	mov	r9, r3
    1d1a:	0c03      	lsrs	r3, r0, #16
    1d1c:	437e      	muls	r6, r7
    1d1e:	435d      	muls	r5, r3
    1d20:	4367      	muls	r7, r4
    1d22:	4363      	muls	r3, r4
    1d24:	197f      	adds	r7, r7, r5
    1d26:	0c34      	lsrs	r4, r6, #16
    1d28:	19e4      	adds	r4, r4, r7
    1d2a:	469c      	mov	ip, r3
    1d2c:	42a5      	cmp	r5, r4
    1d2e:	d903      	bls.n	1d38 <__aeabi_lmul+0x34>
    1d30:	2380      	movs	r3, #128	; 0x80
    1d32:	025b      	lsls	r3, r3, #9
    1d34:	4698      	mov	r8, r3
    1d36:	44c4      	add	ip, r8
    1d38:	464b      	mov	r3, r9
    1d3a:	4351      	muls	r1, r2
    1d3c:	4343      	muls	r3, r0
    1d3e:	0436      	lsls	r6, r6, #16
    1d40:	0c36      	lsrs	r6, r6, #16
    1d42:	0c25      	lsrs	r5, r4, #16
    1d44:	0424      	lsls	r4, r4, #16
    1d46:	4465      	add	r5, ip
    1d48:	19a4      	adds	r4, r4, r6
    1d4a:	1859      	adds	r1, r3, r1
    1d4c:	1949      	adds	r1, r1, r5
    1d4e:	0020      	movs	r0, r4
    1d50:	bc0c      	pop	{r2, r3}
    1d52:	4690      	mov	r8, r2
    1d54:	4699      	mov	r9, r3
    1d56:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001d58 <__libc_init_array>:
    1d58:	b570      	push	{r4, r5, r6, lr}
    1d5a:	2600      	movs	r6, #0
    1d5c:	4d0c      	ldr	r5, [pc, #48]	; (1d90 <__libc_init_array+0x38>)
    1d5e:	4c0d      	ldr	r4, [pc, #52]	; (1d94 <__libc_init_array+0x3c>)
    1d60:	1b64      	subs	r4, r4, r5
    1d62:	10a4      	asrs	r4, r4, #2
    1d64:	42a6      	cmp	r6, r4
    1d66:	d109      	bne.n	1d7c <__libc_init_array+0x24>
    1d68:	2600      	movs	r6, #0
    1d6a:	f000 f8c7 	bl	1efc <_init>
    1d6e:	4d0a      	ldr	r5, [pc, #40]	; (1d98 <__libc_init_array+0x40>)
    1d70:	4c0a      	ldr	r4, [pc, #40]	; (1d9c <__libc_init_array+0x44>)
    1d72:	1b64      	subs	r4, r4, r5
    1d74:	10a4      	asrs	r4, r4, #2
    1d76:	42a6      	cmp	r6, r4
    1d78:	d105      	bne.n	1d86 <__libc_init_array+0x2e>
    1d7a:	bd70      	pop	{r4, r5, r6, pc}
    1d7c:	00b3      	lsls	r3, r6, #2
    1d7e:	58eb      	ldr	r3, [r5, r3]
    1d80:	4798      	blx	r3
    1d82:	3601      	adds	r6, #1
    1d84:	e7ee      	b.n	1d64 <__libc_init_array+0xc>
    1d86:	00b3      	lsls	r3, r6, #2
    1d88:	58eb      	ldr	r3, [r5, r3]
    1d8a:	4798      	blx	r3
    1d8c:	3601      	adds	r6, #1
    1d8e:	e7f2      	b.n	1d76 <__libc_init_array+0x1e>
    1d90:	00001f08 	.word	0x00001f08
    1d94:	00001f08 	.word	0x00001f08
    1d98:	00001f08 	.word	0x00001f08
    1d9c:	00001f0c 	.word	0x00001f0c

00001da0 <malloc>:
    1da0:	b510      	push	{r4, lr}
    1da2:	4b03      	ldr	r3, [pc, #12]	; (1db0 <malloc+0x10>)
    1da4:	0001      	movs	r1, r0
    1da6:	6818      	ldr	r0, [r3, #0]
    1da8:	f000 f80c 	bl	1dc4 <_malloc_r>
    1dac:	bd10      	pop	{r4, pc}
    1dae:	46c0      	nop			; (mov r8, r8)
    1db0:	20000010 	.word	0x20000010

00001db4 <memset>:
    1db4:	0003      	movs	r3, r0
    1db6:	1882      	adds	r2, r0, r2
    1db8:	4293      	cmp	r3, r2
    1dba:	d100      	bne.n	1dbe <memset+0xa>
    1dbc:	4770      	bx	lr
    1dbe:	7019      	strb	r1, [r3, #0]
    1dc0:	3301      	adds	r3, #1
    1dc2:	e7f9      	b.n	1db8 <memset+0x4>

00001dc4 <_malloc_r>:
    1dc4:	2303      	movs	r3, #3
    1dc6:	b570      	push	{r4, r5, r6, lr}
    1dc8:	1ccd      	adds	r5, r1, #3
    1dca:	439d      	bics	r5, r3
    1dcc:	3508      	adds	r5, #8
    1dce:	0006      	movs	r6, r0
    1dd0:	2d0c      	cmp	r5, #12
    1dd2:	d21e      	bcs.n	1e12 <_malloc_r+0x4e>
    1dd4:	250c      	movs	r5, #12
    1dd6:	42a9      	cmp	r1, r5
    1dd8:	d81d      	bhi.n	1e16 <_malloc_r+0x52>
    1dda:	0030      	movs	r0, r6
    1ddc:	f000 f862 	bl	1ea4 <__malloc_lock>
    1de0:	4a25      	ldr	r2, [pc, #148]	; (1e78 <_malloc_r+0xb4>)
    1de2:	6814      	ldr	r4, [r2, #0]
    1de4:	0021      	movs	r1, r4
    1de6:	2900      	cmp	r1, #0
    1de8:	d119      	bne.n	1e1e <_malloc_r+0x5a>
    1dea:	4c24      	ldr	r4, [pc, #144]	; (1e7c <_malloc_r+0xb8>)
    1dec:	6823      	ldr	r3, [r4, #0]
    1dee:	2b00      	cmp	r3, #0
    1df0:	d103      	bne.n	1dfa <_malloc_r+0x36>
    1df2:	0030      	movs	r0, r6
    1df4:	f000 f844 	bl	1e80 <_sbrk_r>
    1df8:	6020      	str	r0, [r4, #0]
    1dfa:	0029      	movs	r1, r5
    1dfc:	0030      	movs	r0, r6
    1dfe:	f000 f83f 	bl	1e80 <_sbrk_r>
    1e02:	1c43      	adds	r3, r0, #1
    1e04:	d12c      	bne.n	1e60 <_malloc_r+0x9c>
    1e06:	230c      	movs	r3, #12
    1e08:	0030      	movs	r0, r6
    1e0a:	6033      	str	r3, [r6, #0]
    1e0c:	f000 f84b 	bl	1ea6 <__malloc_unlock>
    1e10:	e003      	b.n	1e1a <_malloc_r+0x56>
    1e12:	2d00      	cmp	r5, #0
    1e14:	dadf      	bge.n	1dd6 <_malloc_r+0x12>
    1e16:	230c      	movs	r3, #12
    1e18:	6033      	str	r3, [r6, #0]
    1e1a:	2000      	movs	r0, #0
    1e1c:	bd70      	pop	{r4, r5, r6, pc}
    1e1e:	680b      	ldr	r3, [r1, #0]
    1e20:	1b5b      	subs	r3, r3, r5
    1e22:	d41a      	bmi.n	1e5a <_malloc_r+0x96>
    1e24:	2b0b      	cmp	r3, #11
    1e26:	d903      	bls.n	1e30 <_malloc_r+0x6c>
    1e28:	600b      	str	r3, [r1, #0]
    1e2a:	18cc      	adds	r4, r1, r3
    1e2c:	6025      	str	r5, [r4, #0]
    1e2e:	e003      	b.n	1e38 <_malloc_r+0x74>
    1e30:	428c      	cmp	r4, r1
    1e32:	d10e      	bne.n	1e52 <_malloc_r+0x8e>
    1e34:	6863      	ldr	r3, [r4, #4]
    1e36:	6013      	str	r3, [r2, #0]
    1e38:	0030      	movs	r0, r6
    1e3a:	f000 f834 	bl	1ea6 <__malloc_unlock>
    1e3e:	0020      	movs	r0, r4
    1e40:	2207      	movs	r2, #7
    1e42:	300b      	adds	r0, #11
    1e44:	1d23      	adds	r3, r4, #4
    1e46:	4390      	bics	r0, r2
    1e48:	1ac3      	subs	r3, r0, r3
    1e4a:	d0e7      	beq.n	1e1c <_malloc_r+0x58>
    1e4c:	425a      	negs	r2, r3
    1e4e:	50e2      	str	r2, [r4, r3]
    1e50:	e7e4      	b.n	1e1c <_malloc_r+0x58>
    1e52:	684b      	ldr	r3, [r1, #4]
    1e54:	6063      	str	r3, [r4, #4]
    1e56:	000c      	movs	r4, r1
    1e58:	e7ee      	b.n	1e38 <_malloc_r+0x74>
    1e5a:	000c      	movs	r4, r1
    1e5c:	6849      	ldr	r1, [r1, #4]
    1e5e:	e7c2      	b.n	1de6 <_malloc_r+0x22>
    1e60:	2303      	movs	r3, #3
    1e62:	1cc4      	adds	r4, r0, #3
    1e64:	439c      	bics	r4, r3
    1e66:	42a0      	cmp	r0, r4
    1e68:	d0e0      	beq.n	1e2c <_malloc_r+0x68>
    1e6a:	1a21      	subs	r1, r4, r0
    1e6c:	0030      	movs	r0, r6
    1e6e:	f000 f807 	bl	1e80 <_sbrk_r>
    1e72:	1c43      	adds	r3, r0, #1
    1e74:	d1da      	bne.n	1e2c <_malloc_r+0x68>
    1e76:	e7c6      	b.n	1e06 <_malloc_r+0x42>
    1e78:	200000c8 	.word	0x200000c8
    1e7c:	200000cc 	.word	0x200000cc

00001e80 <_sbrk_r>:
    1e80:	2300      	movs	r3, #0
    1e82:	b570      	push	{r4, r5, r6, lr}
    1e84:	4c06      	ldr	r4, [pc, #24]	; (1ea0 <_sbrk_r+0x20>)
    1e86:	0005      	movs	r5, r0
    1e88:	0008      	movs	r0, r1
    1e8a:	6023      	str	r3, [r4, #0]
    1e8c:	f7ff fc5c 	bl	1748 <_sbrk>
    1e90:	1c43      	adds	r3, r0, #1
    1e92:	d103      	bne.n	1e9c <_sbrk_r+0x1c>
    1e94:	6823      	ldr	r3, [r4, #0]
    1e96:	2b00      	cmp	r3, #0
    1e98:	d000      	beq.n	1e9c <_sbrk_r+0x1c>
    1e9a:	602b      	str	r3, [r5, #0]
    1e9c:	bd70      	pop	{r4, r5, r6, pc}
    1e9e:	46c0      	nop			; (mov r8, r8)
    1ea0:	20000138 	.word	0x20000138

00001ea4 <__malloc_lock>:
    1ea4:	4770      	bx	lr

00001ea6 <__malloc_unlock>:
    1ea6:	4770      	bx	lr
    1ea8:	42000800 	.word	0x42000800
    1eac:	42000c00 	.word	0x42000c00
    1eb0:	42001000 	.word	0x42001000
    1eb4:	00000f1a 	.word	0x00000f1a
    1eb8:	00000f16 	.word	0x00000f16
    1ebc:	00000f16 	.word	0x00000f16
    1ec0:	00000f7c 	.word	0x00000f7c
    1ec4:	00000f7c 	.word	0x00000f7c
    1ec8:	00000f2e 	.word	0x00000f2e
    1ecc:	00000f20 	.word	0x00000f20
    1ed0:	00000f34 	.word	0x00000f34
    1ed4:	00000f6a 	.word	0x00000f6a
    1ed8:	00001100 	.word	0x00001100
    1edc:	000010e0 	.word	0x000010e0
    1ee0:	000010e0 	.word	0x000010e0
    1ee4:	0000116c 	.word	0x0000116c
    1ee8:	000010f2 	.word	0x000010f2
    1eec:	0000110e 	.word	0x0000110e
    1ef0:	000010e4 	.word	0x000010e4
    1ef4:	0000111c 	.word	0x0000111c
    1ef8:	0000115c 	.word	0x0000115c

00001efc <_init>:
    1efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1efe:	46c0      	nop			; (mov r8, r8)
    1f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f02:	bc08      	pop	{r3}
    1f04:	469e      	mov	lr, r3
    1f06:	4770      	bx	lr

00001f08 <__init_array_start>:
    1f08:	000000b5 	.word	0x000000b5

00001f0c <_fini>:
    1f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1f0e:	46c0      	nop			; (mov r8, r8)
    1f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1f12:	bc08      	pop	{r3}
    1f14:	469e      	mov	lr, r3
    1f16:	4770      	bx	lr

00001f18 <__fini_array_start>:
    1f18:	0000008d 	.word	0x0000008d
